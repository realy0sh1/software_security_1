0x00000000004125f5: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1262f; add rsp, 0x18; ret; 
0x0000000000412695: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x126cf; add rsp, 0x18; ret; 
0x0000000000410262: adc al, 0xe; sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x000000000041188b: adc byte ptr [r13 + 0x481674d2], r8b; add eax, dword ptr [rdi + 0x68]; ret; 
0x00000000004075ad: adc byte ptr [r8 + 1], cl; ret 0x2b49; 
0x0000000000412763: adc byte ptr [r9 - 0x3b7cb718], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004075ae: adc byte ptr [rax + 1], cl; ret 0x2b49; 
0x00000000004093d4: adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000041188c: adc byte ptr [rbp + 0x481674d2], al; add eax, dword ptr [rdi + 0x68]; ret; 
0x0000000000405969: adc byte ptr [rbp - 0x7b], al; fisttp dword ptr [rdi]; xchg ebp, eax; ret 0xd201; 
0x0000000000413162: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000040145c: adc byte ptr [rcx + 0x5d], al; pop r14; or rax, r15; pop r15; ret; 
0x000000000040160e: adc byte ptr [rcx + rcx - 8], cl; pop r15; ret; 
0x0000000000412a87: adc byte ptr [rcx + rcx*4 + 0x63], al; sub byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000412764: adc byte ptr [rcx - 0x3b7cb718], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000409885: adc byte ptr [rcx - 0x7d], cl; ret 0x6630; 
0x000000000040a2df: adc dword ptr [rax + 0x68], eax; mov eax, edx; ret; 
0x0000000000401198: adc dword ptr [rax], eax; call qword ptr [rip + 0x1ae4f]; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000040ff64: adc dword ptr [rdi + 0x1718], eax; ret; 
0x000000000040119c: adc eax, 0x1ae4f; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000404da2: adc eax, 0x441f0f; add byte ptr [rsi - 2], bh; mov eax, esi; ret; 
0x0000000000411a07: adc eax, 0x6c03; test rax, rax; cmove rax, rdx; ret; 
0x00000000004011a0: add ah, dh; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000406371: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4008; 
0x000000000040ac0f: add al, 0x29; ret 0xd089; 
0x000000000040a6d7: add al, 0x83; ret 0xeb05; 
0x0000000000408a4a: add al, 0x83; ret 0xf301; 
0x000000000040abf9: add al, 0x83; ret; 
0x000000000040e563: add al, 0x83; stc; add dword ptr [rcx], ebx; inc dword ptr [rcx + 0x83e7]; add byte ptr [rbx - 0x7cb7f839], al; ret 0x4904; 
0x00000000004057eb: add al, 0x89; ret 0xe2c1; 
0x0000000000410c72: add al, 0xc2; ret; 
0x00000000004030bc: add al, byte ptr [rax]; add byte ptr [rbx + rcx*4 - 0x4d], al; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xf789; 
0x0000000000405ee0: add al, byte ptr [rax]; add byte ptr [rbx - 0x7af0fd08], al; ret; 
0x0000000000410119: add al, byte ptr [rbx + 0x1734af]; add byte ptr [rax], cl; shr word ptr [rdi + 0x1730], 8; ret; 
0x00000000004114e2: add bh, al; or dword ptr [rax], 0; add byte ptr [rax], al; pop rbx; ret; 
0x000000000041016c: add bh, al; xchg dword ptr [rdi + rdx], esi; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040119a: add bh, bh; adc eax, 0x1ae4f; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000401647: add bh, bh; inc dword ptr [rcx + 0x5f]; cmova rax, rcx; shl rax, 0x10; or rax, rdx; ret; 
0x000000000040713f: add bh, bh; ror byte ptr [rax - 0x77], 1; ret; 
0x0000000000411a87: add bl, ch; mov ebp, 0x441f0f66; add byte ptr [rax], al; ret; 
0x0000000000406471: add byte ptr [rax + 0x29], cl; ret 0x8548; 
0x0000000000401604: add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x0000000000401420: add byte ptr [rax + 0x29], cl; ret; 
0x00000000004020f1: add byte ptr [rax + 0x31], cl; ror byte ptr [rax - 0x77], 1; ret 0xb60f; 
0x0000000000402f96: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000410c4f: add byte ptr [rax + 0xa9], bh; ret; 
0x0000000000411925: add byte ptr [rax + rcx + 0x5b], dh; ret; 
0x0000000000401b2f: add byte ptr [rax - 0x73], cl; add eax, 0x14569; ret; 
0x0000000000410c3f: add byte ptr [rax - 0x73], cl; add eax, 0x7939; ret; 
0x000000000040d6c6: add byte ptr [rax - 0x73], cl; mov bl, byte ptr [rax + 5]; add byte ptr [rax], al; sub rax, rcx; sar rax, 2; ret; 
0x0000000000403bb2: add byte ptr [rax - 0x75], cl; mov ebx, dword ptr [rax - 0x77000000]; ret 0xf631; 
0x0000000000412760: add byte ptr [rax - 0x77], cl; adc byte ptr [r9 - 0x3b7cb718], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004115a4: add byte ptr [rax - 0x77], cl; imul ebp, dword ptr [rax + 0x48], 1; call 0x8c598f8; pop rbx; pop rbp; ret; 
0x0000000000411744: add byte ptr [rax - 0x77], cl; imul ebp, dword ptr [rax + 0x48], 1; call 0x8c59a98; pop rbx; pop rbp; ret; 
0x000000000040146f: add byte ptr [rax - 0x77], cl; ret 0xb60f; 
0x000000000040f3f5: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x7d], 1; ret 0x4901; 
0x0000000000411a0b: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0xfc3; 
0x000000000040100a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000406373: add byte ptr [rax - 0x7d], cl; ret 0x4008; 
0x000000000040e5a3: add byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x000000000040f306: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000411517: add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000411457: add byte ptr [rax - 1], bh; ret; 
0x0000000000411456: add byte ptr [rax - 1], dil; ret; 
0x0000000000404977: add byte ptr [rax - 2], bh; ret; 
0x0000000000404976: add byte ptr [rax - 2], dil; ret; 
0x000000000040d551: add byte ptr [rax - 3], bh; ret; 
0x000000000040770f: add byte ptr [rax - 6], bh; ret; 
0x000000000040770b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xfffffffa; ret; 
0x000000000040cc6b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xfffffffe; ret; 
0x0000000000411513: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004119c3: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x54]; ret; 
0x0000000000412bbf: add byte ptr [rax], 0; add byte ptr [rcx - 0x77], cl; mov ah, 0x24; add byte ptr [rax], 0; add byte ptr [rcx], ch; ret 0x8941; 
0x0000000000412bc7: add byte ptr [rax], 0; add byte ptr [rcx], ch; ret 0x8941; 
0x00000000004114e0: add byte ptr [rax], al; add bh, al; or dword ptr [rax], 0; add byte ptr [rax], al; pop rbx; ret; 
0x000000000040713d: add byte ptr [rax], al; add bh, bh; ror byte ptr [rax - 0x77], 1; ret; 
0x0000000000411a85: add byte ptr [rax], al; add bl, ch; mov ebp, 0x441f0f66; add byte ptr [rax], al; ret; 
0x000000000040646f: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8548; 
0x0000000000410c4d: add byte ptr [rax], al; add byte ptr [rax + 0xa9], bh; ret; 
0x0000000000403bb0: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov ebx, dword ptr [rax - 0x77000000]; ret 0xf631; 
0x000000000040f3f3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x7d], 1; ret 0x4901; 
0x000000000040e5a1: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x000000000040f304: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000411515: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x000000000040675d: add byte ptr [rax], al; add byte ptr [rax - 2], bh; ret; 
0x000000000040d54f: add byte ptr [rax], al; add byte ptr [rax - 3], bh; ret; 
0x000000000040770d: add byte ptr [rax], al; add byte ptr [rax - 6], bh; ret; 
0x0000000000410c4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xa9], bh; ret; 
0x000000000040f3f1: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x7d], 1; ret 0x4901; 
0x000000000040675b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 2], bh; ret; 
0x000000000040ff5d: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rdi + 0x1718], xmm0; ret; 
0x00000000004114e7: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000410171: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040c07b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x1483e04], cl; ret 0x47e9; 
0x000000000040ff5e: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdi + 0x1718], eax; ret; 
0x00000000004047cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx - 2], bh; mov eax, edx; ret; 
0x0000000000411a5a: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbx + 0x74], 0; pop rbx; ret; 
0x00000000004114df: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbx + 0x88], 0; pop rbx; ret; 
0x0000000000410c4c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xa9; ret; 
0x000000000040770c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xfffffffa; ret; 
0x000000000040675c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xfffffffe; ret; 
0x0000000000411514: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004119c4: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x54]; ret; 
0x000000000040ce8f: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, edx; ret; 
0x00000000004047cc: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x000000000040d66c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rdx + 0x5c]; add rax, rdx; ret; 
0x000000000040d65c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffff0000; ret; 
0x000000000040d6dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000040a2da: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x68], xmm0; mov eax, edx; ret; 
0x000000000040ff5f: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rdi + 0x1718], xmm0; ret; 
0x00000000004011a8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x000000000040cc56: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; mov eax, edx; ret; 
0x00000000004114e9: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000408e35: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000410173: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040c07d: add byte ptr [rax], al; add byte ptr [rbp + 0x1483e04], cl; ret 0x47e9; 
0x00000000004125f8: add byte ptr [rax], al; add byte ptr [rbp + 0x32], dh; add rsp, 0x18; ret; 
0x0000000000403ba8: add byte ptr [rax], al; add byte ptr [rbp - 0x367bf037], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov ebx, dword ptr [rax - 0x77000000]; ret 0xf631; 
0x0000000000411933: add byte ptr [rax], al; add byte ptr [rbx + 0x48], bl; sub eax, edx; ret; 
0x000000000040e56c: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7f839], al; ret 0x4904; 
0x000000000040e5b5: add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; sal dword ptr [rbp - 0x42], cl; ret; 
0x0000000000407327: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000403eec: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000412bc0: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; mov ah, 0x24; add byte ptr [rax], 0; add byte ptr [rcx], ch; ret 0x8941; 
0x00000000004042a6: add byte ptr [rax], al; add byte ptr [rcx], bh; ret 0x460f; 
0x0000000000412bc8: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8941; 
0x000000000040b9c3: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xc7e9; 
0x00000000004030c3: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xf789; 
0x000000000040d002: add byte ptr [rax], al; add byte ptr [rcx], ch; ret; 
0x00000000004076d4: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000040e5ae: add byte ptr [rax], al; add byte ptr [rcx], dh; sar byte ptr [rdi + 6], 0x49; cmp ebx, edx; jne 0xe57b; ret; 
0x000000000040a2db: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x68], eax; mov eax, edx; ret; 
0x000000000040ff60: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdi + 0x1718], eax; ret; 
0x000000000040cf1b: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000002], ebp; add esp, 0x10; pop rbx; ret; 
0x0000000000411c6a: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000001], ecx; add esp, 0x10; pop rbx; ret; 
0x0000000000406ce0: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x00000000004047cd: add byte ptr [rax], al; add byte ptr [rdx - 2], bh; mov eax, edx; ret; 
0x0000000000412aad: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rbx - 0x72b7a78d], 5; ret 0x5a; 
0x000000000041062d: add byte ptr [rax], al; add dh, dh; ret 0x7401; 
0x000000000040d54c: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xfffffffd; ret; 
0x000000000040cf22: add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000040a652: add byte ptr [rax], al; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000040494b: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040cc23: add byte ptr [rax], al; cmp ecx, 0x1f; jbe 0xcc30; mov eax, edx; pop rbx; ret; 
0x000000000040ce6d: add byte ptr [rax], al; cmp ecx, 0x1f; jbe 0xce80; mov eax, edx; ret; 
0x000000000040d59d: add byte ptr [rax], al; cmp ecx, 0x1f; jbe 0xd5b0; mov eax, edx; ret; 
0x000000000040a87f: add byte ptr [rax], al; cmp edi, 0x1f; jbe 0xa890; ret; 
0x0000000000411447: add byte ptr [rax], al; cmp esi, eax; cmovb esi, eax; xor eax, eax; mov dword ptr [rdi + 0x2c], esi; ret; 
0x000000000040e5b6: add byte ptr [rax], al; cmp r11, rdx; jne 0xe57b; ret; 
0x0000000000411924: add byte ptr [rax], al; je 0x11930; pop rbx; ret; 
0x0000000000411984: add byte ptr [rax], al; je 0x11990; pop rbx; ret; 
0x00000000004119bc: add byte ptr [rax], al; je 0x119c8; ret; 
0x0000000000411a36: add byte ptr [rax], al; je 0x11a40; pop rbx; ret; 
0x0000000000411a2f: add byte ptr [rax], al; je 0x11a80; cmp eax, 0x79b1; je 0x11a40; pop rbx; ret; 
0x000000000041297a: add byte ptr [rax], al; je 0x12988; mov eax, dword ptr [rdi + 0x40]; ret; 
0x0000000000411c6b: add byte ptr [rax], al; jne 0x11e01; add rsp, 0x10; pop rbx; ret; 
0x00000000004125f9: add byte ptr [rax], al; jne 0x1262f; add rsp, 0x18; ret; 
0x0000000000412699: add byte ptr [rax], al; jne 0x126cf; add rsp, 0x18; ret; 
0x000000000040cf1c: add byte ptr [rax], al; jne 0xd1cf; add rsp, 0x10; pop rbx; ret; 
0x000000000040d647: add byte ptr [rax], al; jne 0xd626; mov esi, dword ptr [rdx + 0x1bf0]; sub esi, dword ptr [rdx + 0x5c]; add rax, rsi; ret; 
0x0000000000410c3e: add byte ptr [rax], al; lea rax, [rip + 0x7939]; ret; 
0x000000000040d6c5: add byte ptr [rax], al; lea rcx, [rdx + 0x558]; sub rax, rcx; sar rax, 2; ret; 
0x0000000000401a38: add byte ptr [rax], al; lea rdx, [rax - 0xfff1]; cmova rax, rdx; shl rax, 0x10; or rax, rcx; ret; 
0x00000000004102ad: add byte ptr [rax], al; mov dword ptr [rax + 0x1734], 0; ret; 
0x0000000000404dcb: add byte ptr [rax], al; mov dword ptr [rax + 0xbc], r8d; mov eax, esi; ret; 
0x0000000000404dbf: add byte ptr [rax], al; mov dword ptr [rax + 0xc0], edx; mov dword ptr [rax + 0xd0], ecx; mov dword ptr [rax + 0xbc], r8d; mov eax, esi; ret; 
0x0000000000404dc5: add byte ptr [rax], al; mov dword ptr [rax + 0xd0], ecx; mov dword ptr [rax + 0xbc], r8d; mov eax, esi; ret; 
0x0000000000411a5c: add byte ptr [rax], al; mov dword ptr [rbx + 0x74], 0; pop rbx; ret; 
0x00000000004114e1: add byte ptr [rax], al; mov dword ptr [rbx + 0x88], 0; pop rbx; ret; 
0x000000000041016b: add byte ptr [rax], al; mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000404c3c: add byte ptr [rax], al; mov dword ptr [rdx], eax; xor ecx, ecx; mov eax, ecx; ret; 
0x0000000000410c4e: add byte ptr [rax], al; mov eax, 0xa9; ret; 
0x000000000040770e: add byte ptr [rax], al; mov eax, 0xfffffffa; ret; 
0x000000000040d550: add byte ptr [rax], al; mov eax, 0xfffffffd; ret; 
0x000000000040675e: add byte ptr [rax], al; mov eax, 0xfffffffe; ret; 
0x0000000000411516: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004119c6: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x54]; ret; 
0x000000000040ce91: add byte ptr [rax], al; mov eax, edx; ret; 
0x0000000000404dd2: add byte ptr [rax], al; mov eax, esi; ret; 
0x0000000000407328: add byte ptr [rax], al; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000004047ce: add byte ptr [rax], al; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x000000000041192e: add byte ptr [rax], al; mov edx, dword ptr [rbx + 0x88]; pop rbx; sub rax, rdx; ret; 
0x000000000040d66e: add byte ptr [rax], al; mov edx, dword ptr [rdx + 0x5c]; add rax, rdx; ret; 
0x0000000000404da6: add byte ptr [rax], al; mov esi, 0xfffffffe; mov eax, esi; ret; 
0x000000000040d65e: add byte ptr [rax], al; mov rax, 0xffffffffffff0000; ret; 
0x000000000041193e: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; pop rbx; ret; 
0x000000000040d6de: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000040a2dc: add byte ptr [rax], al; movups xmmword ptr [rax + 0x68], xmm0; mov eax, edx; ret; 
0x000000000040ff61: add byte ptr [rax], al; movups xmmword ptr [rdi + 0x1718], xmm0; ret; 
0x00000000004011aa: add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x000000000040f120: add byte ptr [rax], al; pop r14; pop r15; ret; 
0x000000000040cc58: add byte ptr [rax], al; pop rbx; mov eax, edx; ret; 
0x0000000000411934: add byte ptr [rax], al; pop rbx; sub rax, rdx; ret; 
0x00000000004114eb: add byte ptr [rax], al; pop rbx; ret; 
0x0000000000410be0: add byte ptr [rax], al; sete al; pop rbx; movzx eax, al; ret; 
0x0000000000410c6a: add byte ptr [rax], al; sub eax, edi; cdqe; mov rax, qword ptr [rdx + rax*8]; ret; 
0x000000000040d64f: add byte ptr [rax], al; sub esi, dword ptr [rdx + 0x5c]; add rax, rsi; ret; 
0x000000000040d6cc: add byte ptr [rax], al; sub rax, rcx; sar rax, 2; ret; 
0x0000000000412186: add byte ptr [rax], al; test eax, eax; jne 0x12164; xor eax, eax; pop rbx; ret; 
0x0000000000411a0a: add byte ptr [rax], al; test rax, rax; cmove rax, rdx; ret; 
0x000000000040e5af: add byte ptr [rax], al; xor eax, eax; mov edi, 6; cmp r11, rdx; jne 0xe57b; ret; 
0x00000000004075f3: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000408e37: add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000040ff68: add byte ptr [rax], al; ret; 
0x0000000000410269: add byte ptr [rax], cl; shr word ptr [rax + 0x1730], 8; ret; 
0x000000000041011f: add byte ptr [rax], cl; shr word ptr [rdi + 0x1730], 8; ret; 
0x0000000000410127: add byte ptr [rax], cl; ret; 
0x0000000000410c3d: add byte ptr [rax], r8b; lea rax, [rip + 0x7939]; ret; 
0x0000000000406cf5: add byte ptr [rax], r8b; mov eax, 0xfffffffe; ret; 
0x000000000041192d: add byte ptr [rax], r8b; mov edx, dword ptr [rbx + 0x88]; pop rbx; sub rax, rdx; ret; 
0x0000000000404da5: add byte ptr [rax], r8b; mov esi, 0xfffffffe; mov eax, esi; ret; 
0x000000000041193d: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffff; pop rbx; ret; 
0x0000000000411a8d: add byte ptr [rax], r8b; ret; 
0x000000000040c07f: add byte ptr [rbp + 0x1483e04], cl; ret 0x47e9; 
0x00000000004125fa: add byte ptr [rbp + 0x32], dh; add rsp, 0x18; ret; 
0x0000000000401935: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000411a30: add byte ptr [rbp + rcx*2 + 0x3d], dh; mov cl, 0x79; add byte ptr [rax], al; je 0x11a40; pop rbx; ret; 
0x000000000040d648: add byte ptr [rbp - 0x25], dh; mov esi, dword ptr [rdx + 0x1bf0]; sub esi, dword ptr [rdx + 0x5c]; add rax, rsi; ret; 
0x0000000000403baa: add byte ptr [rbp - 0x367bf037], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov ebx, dword ptr [rax - 0x77000000]; ret 0xf631; 
0x000000000040d21f: add byte ptr [rbp - 0xe], dh; mov edx, dword ptr [rdx + 0x58]; xor eax, eax; test edx, edx; sete al; ret; 
0x00000000004030a7: add byte ptr [rbx + 0x173483], cl; add byte ptr [rbx - 0x3f7cdfaf], cl; sub al, cl; clc; add edi, dword ptr [rcx]; ret 0x820f; 
0x0000000000405c27: add byte ptr [rbx + 0x438b2055], cl; sub byte ptr [rcx], bh; ret 0x460f; 
0x0000000000411935: add byte ptr [rbx + 0x48], bl; sub eax, edx; ret; 
0x000000000040cc24: add byte ptr [rbx + 0x6761ff9], al; mov eax, edx; pop rbx; ret; 
0x000000000041192f: add byte ptr [rbx + 0x8893], cl; add byte ptr [rbx + 0x48], bl; sub eax, edx; ret; 
0x000000000040a880: add byte ptr [rbx + 0xa761fff], al; ret; 
0x000000000040ce6e: add byte ptr [rbx + 0xc761ff9], al; mov eax, edx; ret; 
0x0000000000404b86: add byte ptr [rbx + 0xf4845e9], al; movabs dword ptr [0xfffffffeba1872ca], eax; mov eax, edx; ret; 
0x0000000000404c06: add byte ptr [rbx + 0xf4845ef], al; movabs dword ptr [0xfffffffeb91872f9], eax; mov eax, ecx; ret; 
0x00000000004030be: add byte ptr [rbx + rcx*4 - 0x4d], al; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xf789; 
0x00000000004030ad: add byte ptr [rbx - 0x3f7cdfaf], cl; sub al, cl; clc; add edi, dword ptr [rcx]; ret 0x820f; 
0x0000000000405ee2: add byte ptr [rbx - 0x7af0fd08], al; ret; 
0x000000000040e56e: add byte ptr [rbx - 0x7cb7f839], al; ret 0x4904; 
0x000000000040d650: add byte ptr [rbx], ch; jb 0xd6b0; add rax, rsi; ret; 
0x000000000040e5b7: add byte ptr [rcx + 0x39], cl; sal dword ptr [rbp - 0x42], cl; ret; 
0x000000000040f116: add byte ptr [rcx + 0x5c], al; pop r13; mov dword ptr [rax + 0x1734], r8d; pop r14; pop r15; ret; 
0x000000000040f121: add byte ptr [rcx + 0x5e], al; pop r15; ret; 
0x000000000040abed: add byte ptr [rcx + 0xf], al; mov dh, 0x45; add eax, dword ptr [rbx - 0x72b2fb13]; add al, 0x83; ret; 
0x000000000040b3e9: add byte ptr [rcx + 0xf], al; mov dh, 0x55; add eax, dword ptr [rbx - 0x72b6fb13]; add al, 0x83; ret; 
0x000000000040fc63: add byte ptr [rcx + 0xf], cl; scasd eax, dword ptr [rdi]; ret; 
0x000000000040fa56: add byte ptr [rcx + 1], al; ret 0xb70f; 
0x00000000004119fe: add byte ptr [rcx + rbx + 0x48], dh; mov eax, dword ptr [rdi + 0x78]; lea rdx, [rip + 0x6c03]; test rax, rax; cmove rax, rdx; ret; 
0x0000000000407329: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000403eee: add byte ptr [rcx - 0x77], al; ret; 
0x0000000000412bc2: add byte ptr [rcx - 0x77], cl; mov ah, 0x24; add byte ptr [rax], 0; add byte ptr [rcx], ch; ret 0x8941; 
0x000000000040d54d: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 3], bh; ret; 
0x000000000040124b: add byte ptr [rcx], al; pop rbp; ret; 
0x00000000004042a8: add byte ptr [rcx], bh; ret 0x460f; 
0x0000000000412bca: add byte ptr [rcx], ch; ret 0x8941; 
0x000000000040b9c5: add byte ptr [rcx], ch; ret 0xc7e9; 
0x0000000000411bdc: add byte ptr [rcx], ch; ret 0xca39; 
0x00000000004030c5: add byte ptr [rcx], ch; ret 0xf789; 
0x0000000000410c6b: add byte ptr [rcx], ch; clc; cdqe; mov rax, qword ptr [rdx + rax*8]; ret; 
0x000000000040b605: add byte ptr [rcx], ch; ret; 
0x00000000004075f4: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000040a8df: add byte ptr [rcx], dh; rol byte ptr [rbp + 0x31], 0xc0; mov qword ptr [rsi + 0x50], rax; xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x000000000040e5b0: add byte ptr [rcx], dh; sar byte ptr [rdi + 6], 0x49; cmp ebx, edx; jne 0xe57b; ret; 
0x000000000040fa4e: add byte ptr [rdi + rcx - 0x49], al; sub dword ptr [rdx + 0x4100000b], 1; ret 0xb70f; 
0x000000000040a2dd: add byte ptr [rdi], cl; adc dword ptr [rax + 0x68], eax; mov eax, edx; ret; 
0x000000000040ff62: add byte ptr [rdi], cl; adc dword ptr [rdi + 0x1718], eax; ret; 
0x000000000040cf1d: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000002], ebp; add esp, 0x10; pop rbx; ret; 
0x0000000000411c6c: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000001], ecx; add esp, 0x10; pop rbx; ret; 
0x000000000040597f: add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x00000000004047cf: add byte ptr [rdx - 2], bh; mov eax, edx; ret; 
0x000000000040a3d6: add byte ptr [rdx - 2], dil; mov eax, edx; ret; 
0x0000000000412aaf: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rbx - 0x72b7a78d], 5; ret 0x5a; 
0x0000000000411a37: add byte ptr [rsi + rax + 0x5b], dh; ret; 
0x0000000000404da7: add byte ptr [rsi - 2], bh; mov eax, esi; ret; 
0x0000000000412514: add byte ptr [rsi - 2], bh; mov rdi, rbx; call 0x11aa0; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000413079: add byte ptr [rsi - 2], bh; mov rdi, rcx; call 0x11aa0; xor eax, eax; pop rbx; ret; 
0x000000000040f320: add cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000411027: add cl, ch; xchg ebx, eax; sbb dword ptr [rax], eax; add byte ptr [rax - 2], bh; ret; 
0x000000000040b05f: add cl, ch; ret; 
0x0000000000404bab: add dh, byte ptr [rbp - 0x1e]; xor edx, edx; mov qword ptr [rax + 0x38], rsi; mov eax, edx; ret; 
0x00000000004083bd: add dh, byte ptr [rcx]; dec dword ptr [rax - 0x7d]; ret 0x6602; 
0x0000000000410163: add dh, byte ptr [rcx]; shl byte ptr [rsi - 0x77], 0x87; xor byte ptr [rdi], dl; add byte ptr [rax], al; mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000404c3f: add dh, byte ptr [rcx]; leave; mov eax, ecx; ret; 
0x000000000040ce83: add dh, byte ptr [rsi + rbp*8 + 0x31]; ror byte ptr [rax - 0x77], cl; jo 0xcebc; mov dword ptr [rsi + 0x48], 0; mov eax, edx; ret; 
0x000000000041062f: add dh, dh; ret 0x7401; 
0x0000000000401199: add dil, dil; adc eax, 0x1ae4f; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000401b34: add dword ptr [r8], r8d; ret; 
0x0000000000402833: add dword ptr [rax - 0x2f], ecx; push qword ptr [rbp - 0x50]; ret; 
0x00000000004089fa: add dword ptr [rax - 0x76b7fcec], ecx; ret 0x8348; 
0x0000000000410112: add dword ptr [rax - 0x77], ecx; ja 0x1013f; mov byte ptr [rdx + rax], cl; sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x000000000041025c: add dword ptr [rax - 0x77], ecx; js 0x10289; mov byte ptr [rsi + rcx], dl; sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x000000000040e56b: add dword ptr [rax], 0; add byte ptr [rbx - 0x7cb7f839], al; ret 0x4904; 
0x0000000000402f94: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000040146d: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb60f; 
0x000000000040d54e: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xfffffffd; ret; 
0x0000000000401009: add dword ptr [rax], eax; test rax, rax; je 0x1012; call rax; add rsp, 8; ret; 
0x000000000040119f: add dword ptr [rax], eax; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000401b35: add dword ptr [rax], eax; ret; 
0x0000000000405974: add dword ptr [rbp - 0x267f75f4], ecx; dec dword ptr [rax - 0x7d]; js 0x59a7; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x000000000041009d: add dword ptr [rbx + 0x28], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040b98b: add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000040e566: add dword ptr [rcx], ebx; inc dword ptr [rcx + 0x83e7]; add byte ptr [rbx - 0x7cb7f839], al; ret 0x4904; 
0x000000000040f750: add dword ptr [rcx], edi; ret 0x57d; 
0x0000000000405380: add dword ptr [rdi], ecx; sahf; ret 0xd009; 
0x0000000000401b32: add eax, 0x14569; ret; 
0x000000000040a450: add eax, 0x1f0f19eb; add byte ptr [rax], r8b; mov eax, 0xfffffffe; ret; 
0x0000000000410c42: add eax, 0x7939; ret; 
0x0000000000406784: add eax, 0xfffc02e9; dec dword ptr [rax - 0x7d]; ret 0xe907; 
0x0000000000404e7a: add eax, 6; ret; 
0x000000000040abf2: add eax, dword ptr [rbx - 0x72b2fb13]; add al, 0x83; ret; 
0x000000000040b3ee: add eax, dword ptr [rbx - 0x72b6fb13]; add al, 0x83; ret; 
0x0000000000411892: add eax, dword ptr [rdi + 0x68]; ret; 
0x000000000040a8bc: add eax, dword ptr [rsi + 0x50]; mov qword ptr [rsi + 0x50], rax; xor eax, eax; ret; 
0x00000000004115aa: add eax, ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000404edf: add eax, ecx; ret; 
0x0000000000410e0b: add eax, edi; ret; 
0x0000000000410e08: add eax, edx; add rax, rdi; ret; 
0x0000000000404ed2: add eax, edx; ret; 
0x000000000040d655: add eax, esi; ret; 
0x0000000000411a08: add ebp, dword ptr [rax + rax]; test rax, rax; cmove rax, rdx; ret; 
0x000000000040448b: add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000004089fd: add ecx, dword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000410ade: add ecx, dword ptr [rcx]; ret 0x60e9; 
0x0000000000404ec9: add ecx, ecx; add rcx, rsi; add rdx, rcx; add rax, rdx; ret; 
0x0000000000404ecc: add ecx, esi; add rdx, rcx; add rax, rdx; ret; 
0x00000000004030b6: add edi, dword ptr [rcx]; ret 0x820f; 
0x0000000000402831: add edx, 1; sar rdi, 1; jne 0x27e9; ret; 
0x00000000004028b1: add edx, 1; sar rdi, 1; jne 0x2869; ret; 
0x0000000000404ecf: add edx, ecx; add rax, rdx; ret; 
0x000000000040cf25: add esp, 0x10; pop rbx; ret; 
0x000000000040116f: add esp, 0x18; ret; 
0x0000000000412314: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000040a655: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004047c0: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000041160e: add esp, 8; mov rax, 0xffffffffffffffff; pop rbx; pop rbp; ret; 
0x000000000040a173: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004048d4: add esp, 8; pop rbx; pop rbp; ret; 
0x000000000040494e: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040484a: add esp, 8; xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000401013: add esp, 8; ret; 
0x000000000040146c: add qword ptr [rax], rax; add byte ptr [rax - 0x77], cl; ret 0xb60f; 
0x000000000041009c: add qword ptr [rbx + 0x28], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000402830: add r10d, 1; sar rdi, 1; jne 0x27e9; ret; 
0x00000000004028b0: add r10d, 1; sar rdi, 1; jne 0x2869; ret; 
0x000000000040abf1: add r8d, dword ptr [r11 - 0x72b2fb13]; add al, 0x83; ret; 
0x0000000000404e79: add rax, 6; ret; 
0x0000000000411891: add rax, qword ptr [rdi + 0x68]; ret; 
0x000000000040a8bb: add rax, qword ptr [rsi + 0x50]; mov qword ptr [rsi + 0x50], rax; xor eax, eax; ret; 
0x00000000004115a9: add rax, rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000404ede: add rax, rcx; ret; 
0x0000000000410e0a: add rax, rdi; ret; 
0x0000000000410e07: add rax, rdx; add rax, rdi; ret; 
0x0000000000404ed1: add rax, rdx; ret; 
0x000000000040d654: add rax, rsi; ret; 
0x0000000000404ec8: add rcx, r9; add rcx, rsi; add rdx, rcx; add rax, rdx; ret; 
0x0000000000404ecb: add rcx, rsi; add rdx, rcx; add rax, rdx; ret; 
0x0000000000404ece: add rdx, rcx; add rax, rdx; ret; 
0x000000000040cf24: add rsp, 0x10; pop rbx; ret; 
0x000000000040116e: add rsp, 0x18; ret; 
0x0000000000412313: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000040a654: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004047bf: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000041160d: add rsp, 8; mov rax, 0xffffffffffffffff; pop rbx; pop rbp; ret; 
0x000000000040a172: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004048d3: add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040494d: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000404849: add rsp, 8; xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000401012: add rsp, 8; ret; 
0x0000000000406468: and al, 0x31; test byte ptr [rax - 0x75], -0x7f; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8548; 
0x0000000000412bc6: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8941; 
0x0000000000410ffc: and al, 8; call 0x10e10; add rsp, 0x18; ret; 
0x000000000041299c: and al, 8; call 0x11e10; mov rdi, qword ptr [rsp + 8]; mov eax, dword ptr [rdi + 0x40]; add rsp, 0x18; ret; 
0x0000000000410ff7: and al, 8; lea rcx, [rsp + 8]; call 0x10e10; add rsp, 0x18; ret; 
0x00000000004129a6: and al, 8; mov eax, dword ptr [rdi + 0x40]; add rsp, 0x18; ret; 
0x00000000004075aa: and byte ptr [rax - 0x75], cl; adc byte ptr [r8 + 1], cl; ret 0x2b49; 
0x00000000004030b0: and byte ptr [rbx - 0x73ed540], al; add edi, dword ptr [rcx]; ret 0x820f; 
0x000000000040319a: and byte ptr [rcx - 0x75], al; sub byte ptr [r9], r15b; ret 0x460f; 
0x00000000004057e2: and byte ptr [rcx], ch; rcl cl, 1; call 0xffffffffe8c227ec; add al, 0x89; ret 0xe2c1; 
0x000000000041191e: and dword ptr [rcx + 0x1c4f187b], eax; add byte ptr [rax], al; je 0x11930; pop rbx; ret; 
0x000000000041197e: and dword ptr [rcx + 0x1c4f187b], eax; add byte ptr [rax], al; je 0x11990; pop rbx; ret; 
0x0000000000411c68: and eax, 0x28; jne 0x11e01; add rsp, 0x10; pop rbx; ret; 
0x00000000004125f6: and eax, 0x28; jne 0x1262f; add rsp, 0x18; ret; 
0x0000000000412696: and eax, 0x28; jne 0x126cf; add rsp, 0x18; ret; 
0x000000000040cf19: and eax, 0x28; jne 0xd1cf; add rsp, 0x10; pop rbx; ret; 
0x000000000040a8b7: and eax, edx; shl eax, cl; add rax, qword ptr [rsi + 0x50]; mov qword ptr [rsi + 0x50], rax; xor eax, eax; ret; 
0x000000000040d5bb: and edx, 0xfffffffb; mov dword ptr [rax + 0x10], edx; xor edx, edx; mov eax, edx; ret; 
0x0000000000404c0b: bt ecx, edi; jb 0x4c28; mov ecx, 0xfffffffe; mov eax, ecx; ret; 
0x0000000000404b8b: bt edx, ecx; jb 0x4ba8; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x0000000000404d9e: bt esi, edi; jb 0x4db8; nop dword ptr [rax + rax]; mov esi, 0xfffffffe; mov eax, esi; ret; 
0x0000000000404c0a: bt rcx, rdi; jb 0x4c28; mov ecx, 0xfffffffe; mov eax, ecx; ret; 
0x0000000000404b8a: bt rdx, rcx; jb 0x4ba8; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x0000000000404d9d: bt rsi, rdi; jb 0x4db8; nop dword ptr [rax + rax]; mov esi, 0xfffffffe; mov eax, esi; ret; 
0x000000000040d54a: call 0x100d56a; add byte ptr [rax], al; add byte ptr [rax - 3], bh; ret; 
0x00000000004113f6: call 0x1040; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000410ffe: call 0x10e10; add rsp, 0x18; ret; 
0x0000000000401167: call 0x10f0; xor eax, eax; add rsp, 0x18; ret; 
0x000000000041251d: call 0x11aa0; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004120bf: call 0x11aa0; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000413082: call 0x11aa0; xor eax, eax; pop rbx; ret; 
0x000000000041299e: call 0x11e10; mov rdi, qword ptr [rsp + 8]; mov eax, dword ptr [rdi + 0x40]; add rsp, 0x18; ret; 
0x00000000004121f9: call 0x12000; cmp eax, -1; jne 0x12175; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000412573: call 0x12330; xor edx, edx; div rbx; pop rbx; ret; 
0x0000000000412fff: call 0x12da0; add rsp, 8; ret; 
0x0000000000413064: call 0x12da0; xor edx, edx; div rbx; pop rbx; ret; 
0x00000000004113fd: call 0x5c42715d; ret; 
0x0000000000412a22: call 0x5c428782; ret; 
0x0000000000413286: call 0x5c428fe6; pop r13; ret; 
0x0000000000413664: call 0x5c4293c4; pop r13; pop r14; ret; 
0x0000000000413ad1: call 0x5c429831; pop r13; ret; 
0x0000000000412a20: call 0x5d5d12ae; pop r12; ret; 
0x00000000004115ab: call 0x8c598f8; pop rbx; pop rbp; ret; 
0x000000000041174b: call 0x8c59a98; pop rbx; pop rbp; ret; 
0x0000000000412766: call 0x8c5aab3; pop rbx; pop rbp; ret; 
0x0000000000404948: call 0xfe80; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040bd3c: call 0xffffffff8300dc50; ret 0xf01; 
0x0000000000404ca3: call 0xffffffffa30f94ed; ret 0x1e72; 
0x000000000040680c: call 0xffffffffa30fb056; ret 0xbc73; 
0x00000000004015fc: call 0xffffffffc0695e10; int1; inc dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x00000000004057e6: call 0xffffffffe8c227ec; add al, 0x89; ret 0xe2c1; 
0x00000000004120c9: call ptr [rbp + 0x41]; pop rsp; ret; 
0x00000000004067d4: call ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000040a429: call ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000040742c: call ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000411617: call ptr [rbx + 0x5d]; ret; 
0x000000000040a882: call ptr [rdi]; jbe 0xa890; ret; 
0x000000000040119b: call qword ptr [rip + 0x1ae4f]; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000401010: call rax; add rsp, 8; ret; 
0x0000000000408e2f: call rax; mov qword ptr [rbx + 0x38], 0; xor eax, eax; pop rbx; ret; 
0x000000000040cc4e: call rax; xor edx, edx; mov qword ptr [rbx + 0x38], 0; pop rbx; mov eax, edx; ret; 
0x000000000040164d: cmova eax, ecx; shl rax, 0x10; or rax, rdx; ret; 
0x0000000000402a24: cmova eax, edx; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000401a42: cmova eax, edx; shl rax, 0x10; or rax, rcx; ret; 
0x000000000040164c: cmova rax, rcx; shl rax, 0x10; or rax, rdx; ret; 
0x0000000000401a41: cmova rax, rdx; shl rax, 0x10; or rax, rcx; ret; 
0x0000000000404e76: cmovae eax, eax; add rax, 6; ret; 
0x0000000000404edb: cmovae ecx, eax; add rax, rcx; ret; 
0x0000000000404e75: cmovae rax, r8; add rax, 6; ret; 
0x0000000000404eda: cmovae rcx, r8; add rax, rcx; ret; 
0x000000000041144b: cmovb esi, eax; xor eax, eax; mov dword ptr [rdi + 0x2c], esi; ret; 
0x0000000000411a10: cmove eax, edx; ret; 
0x0000000000411a0f: cmove rax, rdx; ret; 
0x000000000040637c: cmovl edi, dword ptr [rcx]; ret 0xa73; 
0x0000000000412a1e: cmovne ebp, eax; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000040d0b0: cmovno ecx, dword ptr [rdi]; xchg ebp, eax; ret; 
0x000000000040cd80: cmovs eax, dword ptr [rbx + 0x5d5b08c4]; pop r12; pop r13; ret; 
0x000000000040ccc0: cmovs eax, dword ptr [rbx + 0x5d5b08c4]; ret; 
0x0000000000401419: cmovs ebp, dword ptr [rcx - 0x3e]; int1; inc dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004015fd: cmovs ebp, dword ptr [rcx - 0x40]; int1; inc dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x00000000004019ab: cmovs ebp, dword ptr [rcx]; ret 0x6948; 
0x0000000000406cdd: cmp byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x0000000000406cde: cmp byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x00000000004047bc: cmp byte ptr [rcx + riz + 0x48], dh; add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000040d203: cmp dh, byte ptr [rbp + 0xe]; mov ecx, dword ptr [rdx + 8]; lea esi, [rcx - 0x3f34]; cmp esi, 0x1f; jbe 0xd218; ret; 
0x000000000040d615: cmp dh, byte ptr [rbp + 0xe]; mov ecx, dword ptr [rdx + 8]; lea esi, [rcx - 0x3f34]; cmp esi, 0x1f; jbe 0xd630; ret; 
0x000000000040d533: cmp dh, byte ptr [rbp + 0xe]; mov esi, dword ptr [rdx + 8]; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd548; ret; 
0x000000000040d6a5: cmp dh, byte ptr [rbp + 0xe]; mov esi, dword ptr [rdx + 8]; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd6c0; ret; 
0x0000000000404ba8: cmp dword ptr [rax + 0x30], 2; jne 0x4b90; xor edx, edx; mov qword ptr [rax + 0x38], rsi; mov eax, edx; ret; 
0x000000000041191f: cmp dword ptr [rbx + 0x18], 0x1c4f; je 0x11930; pop rbx; ret; 
0x000000000041197f: cmp dword ptr [rbx + 0x18], 0x1c4f; je 0x11990; pop rbx; ret; 
0x00000000004119b7: cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x119c8; ret; 
0x0000000000412975: cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x12988; mov eax, dword ptr [rdi + 0x40]; ret; 
0x000000000041191a: cmp eax, -1; je 0x11940; cmp dword ptr [rbx + 0x18], 0x1c4f; je 0x11930; pop rbx; ret; 
0x000000000041197a: cmp eax, -1; je 0x119a0; cmp dword ptr [rbx + 0x18], 0x1c4f; je 0x11990; pop rbx; ret; 
0x00000000004121fe: cmp eax, -1; jne 0x12175; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000412549: cmp eax, -5; je 0x12558; xor eax, eax; pop rbx; ret; 
0x00000000004036d7: cmp eax, 0x29fffffe; ret 0x8d48; 
0x0000000000411a33: cmp eax, 0x79b1; je 0x11a40; pop rbx; ret; 
0x0000000000401a35: cmp eax, 0xfff0; lea rdx, [rax - 0xfff1]; cmova rax, rdx; shl rax, 0x10; or rax, rcx; ret; 
0x0000000000412974: cmp eax, dword ptr [rcx + 0x1c4f187f]; add byte ptr [rax], al; je 0x12988; mov eax, dword ptr [rdi + 0x40]; ret; 
0x0000000000404e70: cmp eax, ecx; mov rax, rcx; cmovae rax, r8; add rax, 6; ret; 
0x000000000040e5b9: cmp ebx, edx; jne 0xe57b; ret; 
0x000000000040a24b: cmp ecx, 0x1f; jbe 0xa258; mov eax, edx; ret; 
0x000000000040a32b: cmp ecx, 0x1f; jbe 0xa338; mov eax, edx; ret; 
0x000000000040cc25: cmp ecx, 0x1f; jbe 0xcc30; mov eax, edx; pop rbx; ret; 
0x000000000040ce6f: cmp ecx, 0x1f; jbe 0xce80; mov eax, edx; ret; 
0x000000000040d53f: cmp ecx, 0x1f; jbe 0xd548; ret; 
0x000000000040d59f: cmp ecx, 0x1f; jbe 0xd5b0; mov eax, edx; ret; 
0x000000000040d6b1: cmp ecx, 0x1f; jbe 0xd6c0; ret; 
0x000000000040d643: cmp ecx, 0x3f4c; jne 0xd626; mov esi, dword ptr [rdx + 0x1bf0]; sub esi, dword ptr [rdx + 0x5c]; add rax, rsi; ret; 
0x000000000040a881: cmp edi, 0x1f; jbe 0xa890; ret; 
0x0000000000404ed8: cmp edi, esi; cmovae rcx, r8; add rax, rcx; ret; 
0x0000000000412507: cmp edx, -5; jne 0x12522; pop rbx; ret; 
0x000000000040ccbc: cmp edx, 0x1f; jbe 0xccd0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040d20f: cmp esi, 0x1f; jbe 0xd218; ret; 
0x000000000040d621: cmp esi, 0x1f; jbe 0xd630; ret; 
0x0000000000411449: cmp esi, eax; cmovb esi, eax; xor eax, eax; mov dword ptr [rdi + 0x2c], esi; ret; 
0x000000000040e5b8: cmp r11, rdx; jne 0xe57b; ret; 
0x0000000000404e6f: cmp r8, rcx; mov rax, rcx; cmovae rax, r8; add rax, 6; ret; 
0x0000000000411919: cmp rax, -1; je 0x11940; cmp dword ptr [rbx + 0x18], 0x1c4f; je 0x11930; pop rbx; ret; 
0x0000000000411979: cmp rax, -1; je 0x119a0; cmp dword ptr [rbx + 0x18], 0x1c4f; je 0x11990; pop rbx; ret; 
0x0000000000411a32: cmp rax, 0x79b1; je 0x11a40; pop rbx; ret; 
0x0000000000401a34: cmp rax, 0xfff0; lea rdx, [rax - 0xfff1]; cmova rax, rdx; shl rax, 0x10; or rax, rcx; ret; 
0x0000000000412808: cmpsd dword ptr [rsi], dword ptr [rdi]; or eax, 0xffffffff; ret; 
0x0000000000410ebc: dec dword ptr [rax + 0x39]; ret; 
0x00000000004100e2: dec dword ptr [rax + 1]; imul ebp, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004113fa: dec dword ptr [rax - 0x77]; call 0x5c42715d; ret; 
0x000000000041307e: dec dword ptr [rax - 0x77]; iretd; call 0x11aa0; xor eax, eax; pop rbx; ret; 
0x00000000004113b7: dec dword ptr [rax - 0x77]; ret; 
0x000000000040597a: dec dword ptr [rax - 0x7d]; js 0x59a7; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x0000000000406323: dec dword ptr [rax - 0x7d]; ret 0x4c03; 
0x00000000004083bf: dec dword ptr [rax - 0x7d]; ret 0x6602; 
0x0000000000406777: dec dword ptr [rax - 0x7d]; ret 0xe902; 
0x000000000040676e: dec dword ptr [rax - 0x7d]; ret 0xe903; 
0x0000000000406780: dec dword ptr [rax - 0x7d]; ret 0xe905; 
0x0000000000406792: dec dword ptr [rax - 0x7d]; ret 0xe906; 
0x0000000000406789: dec dword ptr [rax - 0x7d]; ret 0xe907; 
0x000000000040851c: dec dword ptr [rbp - 0x76bef8f4]; ret 0xc883; 
0x0000000000412a1d: dec dword ptr [rdi]; call 0x5d5d12ae; pop r12; ret; 
0x000000000040d103: div byte ptr [rdx + rdi*2 - 0x7d]; ret 0x4401; 
0x000000000041257b: div ebx; pop rbx; ret; 
0x000000000041257a: div rbx; pop rbx; ret; 
0x000000000040282f: fadd dword ptr [rcx - 0x7d]; ret 0x4801; 
0x00000000004026ef: fcomp dword ptr [rbx + 0x5d]; ret; 
0x000000000041325a: fdivp st(6); dec dword ptr [rax - 0x77]; ret; 
0x00000000004026ec: fild dword ptr [rcx + rsi - 0x28]; pop rbx; pop rbp; ret; 
0x000000000040bea2: fimul dword ptr [rax + 0x29]; ret 0x8b41; 
0x000000000040c451: fimul word ptr [rcx + 0x29c189cb]; ret; 
0x000000000040d64a: fisttp dword ptr [rbx + 0x1bf0b2]; add byte ptr [rbx], ch; jb 0xd6b0; add rax, rsi; ret; 
0x000000000040596c: fisttp dword ptr [rdi]; xchg ebp, eax; ret 0xd201; 
0x000000000040bf90: fisttp word ptr [rcx + 0x29c189cb]; ret; 
0x0000000000403f60: fucompi st(0); pop rdx; ret; 
0x0000000000412067: fucompi st(0); ret; 
0x000000000040851a: idiv bh; dec dword ptr [rbp - 0x76bef8f4]; ret 0xc883; 
0x00000000004136d8: imul al; ret 0xfed9; 
0x00000000004115a7: imul ebp, dword ptr [rax + 0x48], 1; call 0x8c598f8; pop rbx; pop rbp; ret; 
0x0000000000411747: imul ebp, dword ptr [rax + 0x48], 1; call 0x8c59a98; pop rbx; pop rbp; ret; 
0x000000000041009e: imul ebp, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000041371a: in eax, 0xeb; ret; 
0x0000000000411409: in eax, dx; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000401602: inc dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000040141e: inc dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000413bc2: inc dword ptr [rax]; sub rsp, 8; add rsp, 8; ret; 
0x000000000040d53e: inc dword ptr [rbx + 0x4761ff9]; ret; 
0x000000000040d20e: inc dword ptr [rbx + 0x4761ffe]; ret; 
0x000000000040a24a: inc dword ptr [rbx + 0x8761ff9]; mov eax, edx; ret; 
0x000000000040d6b0: inc dword ptr [rbx + 0xa761ff9]; ret; 
0x000000000040d620: inc dword ptr [rbx + 0xa761ffe]; ret; 
0x000000000040ccbb: inc dword ptr [rbx + 0xf761ffa]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401649: inc dword ptr [rcx + 0x5f]; cmova rax, rcx; shl rax, 0x10; or rax, rdx; ret; 
0x000000000040e568: inc dword ptr [rcx + 0x83e7]; add byte ptr [rbx - 0x7cb7f839], al; ret 0x4904; 
0x000000000040c6d1: inc dword ptr [rcx]; ret 0xf45; 
0x0000000000411a09: insb byte ptr [rdi], dx; add byte ptr [rax], al; test rax, rax; cmove rax, rdx; ret; 
0x000000000040fae0: insb byte ptr [rdi], dx; ret 0xc901; 
0x00000000004093d3: insd dword ptr [rdi], dx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000410115: ja 0x1013f; mov byte ptr [rdx + rax], cl; sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x000000000041015f: ja 0x10189; mov byte ptr [rdx + rax], cl; xor eax, eax; mov word ptr [rdi + 0x1730], ax; mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000411451: ja 0x1147f; ret; 
0x0000000000412548: jae 0xa762146; xor eax, eax; pop rbx; ret; 
0x00000000004048cc: jb 0x48e8; mov eax, 0xfffffffe; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004049dc: jb 0x49f8; mov eax, 0xfffffffe; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000404b8e: jb 0x4ba8; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x0000000000404c0e: jb 0x4c28; mov ecx, 0xfffffffe; mov eax, ecx; ret; 
0x0000000000404da1: jb 0x4db8; nop dword ptr [rax + rax]; mov esi, 0xfffffffe; mov eax, esi; ret; 
0x0000000000404e6d: jb 0x4e87; cmp r8, rcx; mov rax, rcx; cmovae rax, r8; add rax, 6; ret; 
0x0000000000407426: jb 0x7440; mov eax, 0xfffffffe; pop rbx; pop rbp; pop r12; ret; 
0x000000000040d537: jb 0xd541; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd548; ret; 
0x000000000040d652: jb 0xd6b0; add rax, rsi; ret; 
0x000000000040d6a9: jb 0xd6b3; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd6c0; ret; 
0x000000000040a24e: jbe 0xa258; mov eax, edx; ret; 
0x000000000040a32e: jbe 0xa338; mov eax, edx; ret; 
0x000000000040a884: jbe 0xa890; ret; 
0x000000000040cc28: jbe 0xcc30; mov eax, edx; pop rbx; ret; 
0x000000000040ccbf: jbe 0xccd0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040ce72: jbe 0xce80; mov eax, edx; ret; 
0x000000000040d212: jbe 0xd218; ret; 
0x000000000040d542: jbe 0xd548; ret; 
0x000000000040d5a2: jbe 0xd5b0; mov eax, edx; ret; 
0x000000000040d624: jbe 0xd630; ret; 
0x000000000040d6b4: jbe 0xd6c0; ret; 
0x000000000040100e: je 0x1012; call rax; add rsp, 8; ret; 
0x000000000041188f: je 0x118a7; add rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004118cf: je 0x118e7; add rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000411926: je 0x11930; pop rbx; ret; 
0x000000000041191d: je 0x11940; cmp dword ptr [rbx + 0x18], 0x1c4f; je 0x11930; pop rbx; ret; 
0x0000000000411986: je 0x11990; pop rbx; ret; 
0x000000000041197d: je 0x119a0; cmp dword ptr [rbx + 0x18], 0x1c4f; je 0x11990; pop rbx; ret; 
0x00000000004119b5: je 0x119c0; cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x119c8; ret; 
0x00000000004119be: je 0x119c8; ret; 
0x00000000004119ff: je 0x11a1a; mov rax, qword ptr [rdi + 0x78]; lea rdx, [rip + 0x6c03]; test rax, rax; cmove rax, rdx; ret; 
0x0000000000411a38: je 0x11a40; pop rbx; ret; 
0x0000000000411a52: je 0x11a50; jne 0x11a70; mov qword ptr [rbx + 0x78], 0; mov dword ptr [rbx + 0x74], 0; pop rbx; ret; 
0x0000000000411a31: je 0x11a80; cmp eax, 0x79b1; je 0x11a40; pop rbx; ret; 
0x0000000000411bda: je 0x11be1; add byte ptr [rcx], ch; ret 0xca39; 
0x0000000000412505: je 0x1250c; cmp edx, -5; jne 0x12522; pop rbx; ret; 
0x0000000000412547: je 0x12558; cmp eax, -5; je 0x12558; xor eax, eax; pop rbx; ret; 
0x000000000041254c: je 0x12558; xor eax, eax; pop rbx; ret; 
0x000000000041282a: je 0x12850; or byte ptr [rdi], cl; sahf; ret 0xd008; 
0x000000000041297c: je 0x12988; mov eax, dword ptr [rdi + 0x40]; ret; 
0x0000000000412973: je 0x129b0; cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x12988; mov eax, dword ptr [rdi + 0x40]; ret; 
0x0000000000413885: je 0x138e2; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004047bd: je 0x47e0; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000404c36: je 0x4c40; mov eax, dword ptr [rax + 0x1734]; mov dword ptr [rdx], eax; xor ecx, ecx; mov eax, ecx; ret; 
0x0000000000407266: je 0x7280; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000040ce84: je 0xce74; xor edx, edx; mov qword ptr [rax + 0x30], rsi; mov dword ptr [rsi + 0x48], 0; mov eax, edx; ret; 
0x000000000040f31e: je 0xf2b5; add cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000408e2d: jg 0x8e7f; call rax; mov qword ptr [rbx + 0x38], 0; xor eax, eax; pop rbx; ret; 
0x0000000000412be0: jl 0x12c06; sbb al, 0x39; ret 0xf48; 
0x000000000040a879: jle 0xa883; sub edi, 0x3f34; cmp edi, 0x1f; jbe 0xa890; ret; 
0x000000000041009a: jne 0x100d0; add qword ptr [rbx + 0x28], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000411a54: jne 0x11a70; mov qword ptr [rbx + 0x78], 0; mov dword ptr [rbx + 0x74], 0; pop rbx; ret; 
0x0000000000411c6d: jne 0x11e01; add rsp, 0x10; pop rbx; ret; 
0x000000000041218a: jne 0x12164; xor eax, eax; pop rbx; ret; 
0x0000000000412201: jne 0x12175; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000412311: jne 0x122dc; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000041250a: jne 0x12522; pop rbx; ret; 
0x00000000004125fb: jne 0x1262f; add rsp, 0x18; ret; 
0x000000000041269b: jne 0x126cf; add rsp, 0x18; ret; 
0x00000000004026eb: jne 0x26c8; xor eax, r11d; pop rbx; pop rbp; ret; 
0x00000000004027ab: jne 0x2788; xor eax, r11d; pop rbx; pop rbp; ret; 
0x0000000000402837: jne 0x27e9; ret; 
0x000000000040282e: jne 0x2808; add r10d, 1; sar rdi, 1; jne 0x27e9; ret; 
0x00000000004028b7: jne 0x2869; ret; 
0x00000000004028ae: jne 0x2888; add r10d, 1; sar rdi, 1; jne 0x2869; ret; 
0x00000000004028f9: jne 0x28d0; xor eax, esi; ret; 
0x0000000000404bac: jne 0x4b90; xor edx, edx; mov qword ptr [rax + 0x38], rsi; mov eax, edx; ret; 
0x000000000040a688: jne 0xa6f0; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000040a7b7: jne 0xa820; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000040a876: jne 0xa886; mov edi, dword ptr [rsi + 8]; sub edi, 0x3f34; cmp edi, 0x1f; jbe 0xa890; ret; 
0x000000000040cf1e: jne 0xd1cf; add rsp, 0x10; pop rbx; ret; 
0x000000000040d204: jne 0xd214; mov ecx, dword ptr [rdx + 8]; lea esi, [rcx - 0x3f34]; cmp esi, 0x1f; jbe 0xd218; ret; 
0x000000000040d220: jne 0xd214; mov edx, dword ptr [rdx + 0x58]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000040d534: jne 0xd544; mov esi, dword ptr [rdx + 8]; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd548; ret; 
0x000000000040d5b9: jne 0xd5e0; and edx, 0xfffffffb; mov dword ptr [rax + 0x10], edx; xor edx, edx; mov eax, edx; ret; 
0x000000000040d616: jne 0xd626; mov ecx, dword ptr [rdx + 8]; lea esi, [rcx - 0x3f34]; cmp esi, 0x1f; jbe 0xd630; ret; 
0x000000000040d649: jne 0xd626; mov esi, dword ptr [rdx + 0x1bf0]; sub esi, dword ptr [rdx + 0x5c]; add rax, rsi; ret; 
0x000000000040d6a6: jne 0xd6b6; mov esi, dword ptr [rdx + 8]; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd6c0; ret; 
0x000000000040e5bb: jne 0xe57b; ret; 
0x0000000000411920: jnp 0x1193a; sbb al, 0; add byte ptr [rax + rcx + 0x5b], dh; ret; 
0x0000000000411980: jnp 0x1199a; sbb al, 0; add byte ptr [rax + rcx + 0x5b], dh; ret; 
0x000000000041025b: jns 0x1025e; mov qword ptr [rax + 0x28], rdi; mov byte ptr [rsi + rcx], dl; sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x000000000041160b: jns 0x115d9; add rsp, 8; mov rax, 0xffffffffffffffff; pop rbx; pop rbp; ret; 
0x00000000004117ab: jns 0x11779; add rsp, 8; mov rax, 0xffffffffffffffff; pop rbx; pop rbp; ret; 
0x0000000000411a35: jns 0x11a37; add byte ptr [rsi + rax + 0x5b], dh; ret; 
0x0000000000410111: jo 0x10114; mov qword ptr [rdi + 0x28], rsi; mov byte ptr [rdx + rax], cl; sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x0000000000411888: jo 0x118d2; mov eax, dword ptr [rdi + 0x10]; test edx, edx; je 0x118a7; add rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004118c8: jo 0x11912; mov eax, dword ptr [rdi + 0x10]; test edx, edx; je 0x118e7; add rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000404bb2: jo 0x4bec; mov eax, edx; ret; 
0x0000000000406a96: jo 0x6a21; ret 0x708d; 
0x000000000040a243: jo 0xa24d; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xa258; mov eax, edx; ret; 
0x000000000040a323: jo 0xa32d; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xa338; mov eax, edx; ret; 
0x000000000040ce8a: jo 0xcebc; mov dword ptr [rsi + 0x48], 0; mov eax, edx; ret; 
0x000000000040d105: jp 0xd08a; ret 0x4401; 
0x000000000041025f: js 0x10289; mov byte ptr [rsi + rcx], dl; sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x0000000000411a04: js 0x11a4e; lea edx, [rip + 0x6c03]; test rax, rax; cmove rax, rdx; ret; 
0x0000000000412ffb: js 0x13010; mov edx, edx; call 0x12da0; add rsp, 8; ret; 
0x0000000000404ba9: js 0x4bdb; add dh, byte ptr [rbp - 0x1e]; xor edx, edx; mov qword ptr [rax + 0x38], rsi; mov eax, edx; ret; 
0x000000000040597d: js 0x59a7; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x00000000004028f1: lea eax, [rcx - 1]; xor eax, edi; test r8d, edx; jne 0x28d0; xor eax, esi; ret; 
0x0000000000410dff: lea eax, [rdi + rax + 0xd]; shr rdi, 0x19; add rax, rdx; add rax, rdi; ret; 
0x0000000000401b31: lea eax, [rip + 0x14569]; ret; 
0x0000000000410c41: lea eax, [rip + 0x7939]; ret; 
0x000000000040d6c8: lea ecx, [rdx + 0x558]; sub rax, rcx; sar rax, 2; ret; 
0x000000000040a245: lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xa258; mov eax, edx; ret; 
0x000000000040a325: lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xa338; mov eax, edx; ret; 
0x000000000040d539: lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd548; ret; 
0x000000000040d6ab: lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd6c0; ret; 
0x0000000000410ffa: lea ecx, [rsp + 8]; call 0x10e10; add rsp, 0x18; ret; 
0x000000000041025a: lea edi, [rcx + 1]; mov qword ptr [rax + 0x28], rdi; mov byte ptr [rsi + rcx], dl; sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x0000000000401a3b: lea edx, [rax - 0xfff1]; cmova rax, rdx; shl rax, 0x10; or rax, rcx; ret; 
0x0000000000411a06: lea edx, [rip + 0x6c03]; test rax, rax; cmove rax, rdx; ret; 
0x0000000000410110: lea esi, [rax + 1]; mov qword ptr [rdi + 0x28], rsi; mov byte ptr [rdx + rax], cl; sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x000000000040d209: lea esi, [rcx - 0x3f34]; cmp esi, 0x1f; jbe 0xd218; ret; 
0x000000000040d61b: lea esi, [rcx - 0x3f34]; cmp esi, 0x1f; jbe 0xd630; ret; 
0x00000000004028f0: lea r8d, [rcx - 1]; xor eax, edi; test r8d, edx; jne 0x28d0; xor eax, esi; ret; 
0x0000000000410dfe: lea rax, [rdi + rax + 0xd]; shr rdi, 0x19; add rax, rdx; add rax, rdi; ret; 
0x0000000000401b30: lea rax, [rip + 0x14569]; ret; 
0x0000000000410c40: lea rax, [rip + 0x7939]; ret; 
0x000000000040d6c7: lea rcx, [rdx + 0x558]; sub rax, rcx; sar rax, 2; ret; 
0x0000000000410ff9: lea rcx, [rsp + 8]; call 0x10e10; add rsp, 0x18; ret; 
0x0000000000410259: lea rdi, [rcx + 1]; mov qword ptr [rax + 0x28], rdi; mov byte ptr [rsi + rcx], dl; sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x0000000000401a3a: lea rdx, [rax - 0xfff1]; cmova rax, rdx; shl rax, 0x10; or rax, rcx; ret; 
0x0000000000411a05: lea rdx, [rip + 0x6c03]; test rax, rax; cmove rax, rdx; ret; 
0x000000000041010f: lea rsi, [rax + 1]; mov qword ptr [rdi + 0x28], rsi; mov byte ptr [rdx + rax], cl; sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x00000000004065bd: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8548; 
0x00000000004030c2: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xf789; 
0x0000000000412aac: lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rbx - 0x72b7a78d], 5; ret 0x5a; 
0x0000000000412bc5: mov ah, 0x24; add byte ptr [rax], 0; add byte ptr [rcx], ch; ret 0x8941; 
0x0000000000410c69: mov al, 0; add byte ptr [rcx], ch; clc; cdqe; mov rax, qword ptr [rdx + rax*8]; ret; 
0x0000000000405977: mov al, byte ptr [rax - 0x7cb70027]; js 0x59a7; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x000000000040fa51: mov bh, 0x83; stosb byte ptr [rdi], al; or eax, dword ptr [rax]; add byte ptr [rcx + 1], al; ret 0xb70f; 
0x00000000004030c1: mov bl, 0xac; add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xf789; 
0x000000000040d6c9: mov bl, byte ptr [rax + 5]; add byte ptr [rax], al; sub rax, rcx; sar rax, 2; ret; 
0x00000000004114e5: mov byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000411932: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; sub rax, rdx; ret; 
0x0000000000410117: mov byte ptr [rdx + rax], cl; sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x0000000000410161: mov byte ptr [rdx + rax], cl; xor eax, eax; mov word ptr [rdi + 0x1730], ax; mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000410261: mov byte ptr [rsi + rcx], dl; sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x0000000000411a34: mov cl, 0x79; add byte ptr [rax], al; je 0x11a40; pop rbx; ret; 
0x000000000040d20a: mov cl, 0xcc; sar bh, 0xff; cmp esi, 0x1f; jbe 0xd218; ret; 
0x000000000040d61c: mov cl, 0xcc; sar bh, 0xff; cmp esi, 0x1f; jbe 0xd630; ret; 
0x000000000040a246: mov cs, esp; sar bh, 0xff; cmp ecx, 0x1f; jbe 0xa258; mov eax, edx; ret; 
0x000000000040a326: mov cs, esp; sar bh, 0xff; cmp ecx, 0x1f; jbe 0xa338; mov eax, edx; ret; 
0x000000000040d53a: mov cs, esp; sar bh, 0xff; cmp ecx, 0x1f; jbe 0xd548; ret; 
0x000000000040d6ac: mov cs, esp; sar bh, 0xff; cmp ecx, 0x1f; jbe 0xd6c0; ret; 
0x00000000004089f8: mov dh, 0x14; add dword ptr [rax - 0x76b7fcec], ecx; ret 0x8348; 
0x000000000040abf0: mov dh, 0x45; add eax, dword ptr [rbx - 0x72b2fb13]; add al, 0x83; ret; 
0x000000000040b3ec: mov dh, 0x55; add eax, dword ptr [rbx - 0x72b6fb13]; add al, 0x83; ret; 
0x0000000000410be7: mov dh, 0xc0; ret; 
0x000000000040d64c: mov dl, 0xf0; sbb eax, dword ptr [rax]; add byte ptr [rbx], ch; jb 0xd6b0; add rax, rsi; ret; 
0x000000000040d5be: mov dword ptr [rax + 0x10], edx; xor edx, edx; mov eax, edx; ret; 
0x00000000004102a9: mov dword ptr [rax + 0x1730], edx; mov dword ptr [rax + 0x1734], 0; ret; 
0x00000000004102af: mov dword ptr [rax + 0x1734], 0; ret; 
0x000000000040f11c: mov dword ptr [rax + 0x1734], eax; pop r14; pop r15; ret; 
0x000000000040f11b: mov dword ptr [rax + 0x1734], r8d; pop r14; pop r15; ret; 
0x000000000041025e: mov dword ptr [rax + 0x28], edi; mov byte ptr [rsi + rcx], dl; sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x000000000040ce89: mov dword ptr [rax + 0x30], esi; mov dword ptr [rsi + 0x48], 0; mov eax, edx; ret; 
0x0000000000404bb1: mov dword ptr [rax + 0x38], esi; mov eax, edx; ret; 
0x000000000040a2d7: mov dword ptr [rax + 0x58], 0; movups xmmword ptr [rax + 0x68], xmm0; mov eax, edx; ret; 
0x0000000000404dce: mov dword ptr [rax + 0xbc], eax; mov eax, esi; ret; 
0x0000000000404dcd: mov dword ptr [rax + 0xbc], r8d; mov eax, esi; ret; 
0x0000000000404dc1: mov dword ptr [rax + 0xc0], edx; mov dword ptr [rax + 0xd0], ecx; mov dword ptr [rax + 0xbc], r8d; mov eax, esi; ret; 
0x0000000000404dbb: mov dword ptr [rax + 0xcc], ecx; mov dword ptr [rax + 0xc0], edx; mov dword ptr [rax + 0xd0], ecx; mov dword ptr [rax + 0xbc], r8d; mov eax, esi; ret; 
0x0000000000404dba: mov dword ptr [rax + 0xcc], r9d; mov dword ptr [rax + 0xc0], edx; mov dword ptr [rax + 0xd0], ecx; mov dword ptr [rax + 0xbc], r8d; mov eax, esi; ret; 
0x0000000000404dc7: mov dword ptr [rax + 0xd0], ecx; mov dword ptr [rax + 0xbc], r8d; mov eax, esi; ret; 
0x0000000000412762: mov dword ptr [rbx + 0x10], eax; mov eax, ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412a89: mov dword ptr [rbx + 0x28], esp; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412a88: mov dword ptr [rbx + 0x28], r12d; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000040cc53: mov dword ptr [rbx + 0x38], 0; pop rbx; mov eax, edx; ret; 
0x0000000000408e32: mov dword ptr [rbx + 0x38], 0; xor eax, eax; pop rbx; ret; 
0x00000000004115a6: mov dword ptr [rbx + 0x68], ebp; add rax, rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000411a5e: mov dword ptr [rbx + 0x74], 0; pop rbx; ret; 
0x0000000000411a57: mov dword ptr [rbx + 0x78], 0; mov dword ptr [rbx + 0x74], 0; pop rbx; ret; 
0x00000000004114e3: mov dword ptr [rbx + 0x88], 0; pop rbx; ret; 
0x00000000004120a5: mov dword ptr [rbx + 8], eax; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000040cce4: mov dword ptr [rbx], eax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040ff59: mov dword ptr [rdi + 0x170c], 0; movups xmmword ptr [rdi + 0x1718], xmm0; ret; 
0x0000000000410167: mov dword ptr [rdi + 0x1730], eax; mov dword ptr [rdi + 0x1734], 0; ret; 
0x000000000041016d: mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000410114: mov dword ptr [rdi + 0x28], esi; mov byte ptr [rdx + rax], cl; sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x000000000041015e: mov dword ptr [rdi + 0x28], esi; mov byte ptr [rdx + rax], cl; xor eax, eax; mov word ptr [rdi + 0x1730], ax; mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000411450: mov dword ptr [rdi + 0x2c], esi; ret; 
0x000000000040d548: mov dword ptr [rdx + 0x1be8], 1; mov eax, 0xfffffffd; ret; 
0x0000000000404c3e: mov dword ptr [rdx], eax; xor ecx, ecx; mov eax, ecx; ret; 
0x000000000040ce8c: mov dword ptr [rsi + 0x48], 0; mov eax, edx; ret; 
0x000000000040a8e6: mov dword ptr [rsi + 0x50], eax; xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x000000000040a8c0: mov dword ptr [rsi + 0x50], eax; xor eax, eax; ret; 
0x000000000040a8ec: mov dword ptr [rsi + 0x58], eax; ret; 
0x000000000040a8eb: mov dword ptr [rsi + 0x58], r8d; ret; 
0x0000000000410ff5: mov dword ptr [rsp + 8], ecx; lea rcx, [rsp + 8]; call 0x10e10; add rsp, 0x18; ret; 
0x000000000041299a: mov dword ptr [rsp + 8], edi; call 0x11e10; mov rdi, qword ptr [rsp + 8]; mov eax, dword ptr [rdi + 0x40]; add rsp, 0x18; ret; 
0x0000000000412574: mov eax, 0x31fffffd; ror byte ptr [rax - 9], cl; pop rbx; ret; 
0x0000000000410c50: mov eax, 0xa9; ret; 
0x000000000040d661: mov eax, 0xffff0000; ret; 
0x0000000000407710: mov eax, 0xfffffffa; ret; 
0x000000000040d552: mov eax, 0xfffffffd; ret; 
0x00000000004048ce: mov eax, 0xfffffffe; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040a425: mov eax, 0xfffffffe; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000407428: mov eax, 0xfffffffe; pop rbx; pop rbp; pop r12; ret; 
0x0000000000408e3d: mov eax, 0xfffffffe; pop rbx; ret; 
0x0000000000404780: mov eax, 0xfffffffe; ret; 
0x00000000004120c5: mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000411612: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000411518: mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040d6e1: mov eax, 0xffffffff; ret; 
0x0000000000404c38: mov eax, dword ptr [rax + 0x1734]; mov dword ptr [rdx], eax; xor ecx, ecx; mov eax, ecx; ret; 
0x000000000041188a: mov eax, dword ptr [rdi + 0x10]; test edx, edx; je 0x118a7; add rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004118ca: mov eax, dword ptr [rdi + 0x10]; test edx, edx; je 0x118e7; add rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004129a8: mov eax, dword ptr [rdi + 0x40]; add rsp, 0x18; ret; 
0x000000000041297e: mov eax, dword ptr [rdi + 0x40]; ret; 
0x00000000004119c8: mov eax, dword ptr [rdi + 0x54]; ret; 
0x0000000000411a02: mov eax, dword ptr [rdi + 0x78]; lea rdx, [rip + 0x6c03]; test rax, rax; cmove rax, rdx; ret; 
0x0000000000410c71: mov eax, dword ptr [rdx + rax*8]; ret; 
0x0000000000412765: mov eax, ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041140c: mov eax, ebp; pop rbp; pop r12; ret; 
0x0000000000413285: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004113fc: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000040a658: mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000404e73: mov eax, ecx; cmovae rax, r8; add rax, 6; ret; 
0x0000000000404c15: mov eax, ecx; ret; 
0x00000000004047c3: mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000040cc2a: mov eax, edx; pop rbx; ret; 
0x0000000000401609: mov eax, edx; shl rax, 0x10; or rax, r15; pop r15; ret; 
0x00000000004047d5: mov eax, edx; ret; 
0x0000000000404dad: mov eax, esi; ret; 
0x0000000000404cb8: mov eax, esp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000407269: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000404cb7: mov eax, r12d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000407268: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000413284: mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000411a89: mov ebp, 0x441f0f66; add byte ptr [rax], al; ret; 
0x0000000000412064: mov ebx, 0xe8df8948; ret; 
0x0000000000403bb5: mov ebx, dword ptr [rax - 0x77000000]; ret 0xf631; 
0x0000000000404c10: mov ecx, 0xfffffffe; mov eax, ecx; ret; 
0x000000000040ce66: mov ecx, dword ptr [rax + 8]; sub ecx, 0x3f34; cmp ecx, 0x1f; jbe 0xce80; mov eax, edx; ret; 
0x000000000040d596: mov ecx, dword ptr [rax + 8]; sub ecx, 0x3f34; cmp ecx, 0x1f; jbe 0xd5b0; mov eax, edx; ret; 
0x000000000040d206: mov ecx, dword ptr [rdx + 8]; lea esi, [rcx - 0x3f34]; cmp esi, 0x1f; jbe 0xd218; ret; 
0x000000000040d618: mov ecx, dword ptr [rdx + 8]; lea esi, [rcx - 0x3f34]; cmp esi, 0x1f; jbe 0xd630; ret; 
0x0000000000401195: mov edi, 0x401160; call qword ptr [rip + 0x1ae4f]; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000040e5b3: mov edi, 6; cmp r11, rdx; jne 0xe57b; ret; 
0x0000000000408e2c: mov edi, dword ptr [rdi + 0x50]; call rax; mov qword ptr [rbx + 0x38], 0; xor eax, eax; pop rbx; ret; 
0x000000000040a878: mov edi, dword ptr [rsi + 8]; sub edi, 0x3f34; cmp edi, 0x1f; jbe 0xa890; ret; 
0x00000000004129a4: mov edi, dword ptr [rsp + 8]; mov eax, dword ptr [rdi + 0x40]; add rsp, 0x18; ret; 
0x000000000041251b: mov edi, ebx; call 0x11aa0; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000413080: mov edi, ecx; call 0x11aa0; xor eax, eax; pop rbx; ret; 
0x0000000000412571: mov edi, ecx; call 0x12330; xor edx, edx; div rbx; pop rbx; ret; 
0x0000000000413062: mov edi, ecx; call 0x12da0; xor edx, edx; div rbx; pop rbx; ret; 
0x0000000000401165: mov edi, esp; call 0x10f0; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000406c4f: mov edx, 0xfffffffe; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000040a2e8: mov edx, 0xfffffffe; mov eax, edx; ret; 
0x000000000040cc60: mov edx, 0xfffffffe; pop rbx; mov eax, edx; ret; 
0x0000000000411930: mov edx, dword ptr [rbx + 0x88]; pop rbx; sub rax, rdx; ret; 
0x000000000040d222: mov edx, dword ptr [rdx + 0x58]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000040d670: mov edx, dword ptr [rdx + 0x5c]; add rax, rdx; ret; 
0x0000000000412ffd: mov edx, edx; call 0x12da0; add rsp, 8; ret; 
0x0000000000411c6f: mov es, word ptr [rcx]; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000040e98b: mov esi, 0x5bfffffe; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000404da8: mov esi, 0xfffffffe; mov eax, esi; ret; 
0x0000000000412515: mov esi, 0xfffffffe; mov rdi, rbx; call 0x11aa0; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000041307a: mov esi, 0xfffffffe; mov rdi, rcx; call 0x11aa0; xor eax, eax; pop rbx; ret; 
0x000000000040a242: mov esi, dword ptr [rax + 8]; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xa258; mov eax, edx; ret; 
0x000000000040a322: mov esi, dword ptr [rax + 8]; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xa338; mov eax, edx; ret; 
0x000000000040d64b: mov esi, dword ptr [rdx + 0x1bf0]; sub esi, dword ptr [rdx + 0x5c]; add rax, rsi; ret; 
0x000000000040d536: mov esi, dword ptr [rdx + 8]; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd548; ret; 
0x000000000040d6a8: mov esi, dword ptr [rdx + 8]; lea ecx, [rsi - 0x3f34]; cmp ecx, 0x1f; jbe 0xd6c0; ret; 
0x000000000041025d: mov qword ptr [rax + 0x28], rdi; mov byte ptr [rsi + rcx], dl; sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x000000000040ce88: mov qword ptr [rax + 0x30], rsi; mov dword ptr [rsi + 0x48], 0; mov eax, edx; ret; 
0x0000000000404bb0: mov qword ptr [rax + 0x38], rsi; mov eax, edx; ret; 
0x0000000000412761: mov qword ptr [rbx + 0x10], rax; mov eax, ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040cc52: mov qword ptr [rbx + 0x38], 0; pop rbx; mov eax, edx; ret; 
0x0000000000408e31: mov qword ptr [rbx + 0x38], 0; xor eax, eax; pop rbx; ret; 
0x00000000004115a5: mov qword ptr [rbx + 0x68], rbp; add rax, rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000411a56: mov qword ptr [rbx + 0x78], 0; mov dword ptr [rbx + 0x74], 0; pop rbx; ret; 
0x00000000004120a4: mov qword ptr [rbx + 8], rax; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000410113: mov qword ptr [rdi + 0x28], rsi; mov byte ptr [rdx + rax], cl; sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x000000000041015d: mov qword ptr [rdi + 0x28], rsi; mov byte ptr [rdx + rax], cl; xor eax, eax; mov word ptr [rdi + 0x1730], ax; mov dword ptr [rdi + 0x1734], 0; ret; 
0x000000000040a8e5: mov qword ptr [rsi + 0x50], rax; xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x000000000040a8bf: mov qword ptr [rsi + 0x50], rax; xor eax, eax; ret; 
0x0000000000410ff4: mov qword ptr [rsp + 8], rcx; lea rcx, [rsp + 8]; call 0x10e10; add rsp, 0x18; ret; 
0x0000000000412999: mov qword ptr [rsp + 8], rdi; call 0x11e10; mov rdi, qword ptr [rsp + 8]; mov eax, dword ptr [rdi + 0x40]; add rsp, 0x18; ret; 
0x000000000040d660: mov rax, 0xffffffffffff0000; ret; 
0x0000000000411611: mov rax, 0xffffffffffffffff; pop rbx; pop rbp; ret; 
0x0000000000411940: mov rax, 0xffffffffffffffff; pop rbx; ret; 
0x000000000040d6e0: mov rax, 0xffffffffffffffff; ret; 
0x0000000000411889: mov rax, qword ptr [rdi + 0x10]; test edx, edx; je 0x118a7; add rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004118c9: mov rax, qword ptr [rdi + 0x10]; test edx, edx; je 0x118e7; add rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000411a01: mov rax, qword ptr [rdi + 0x78]; lea rdx, [rip + 0x6c03]; test rax, rax; cmove rax, rdx; ret; 
0x0000000000410c70: mov rax, qword ptr [rdx + rax*8]; ret; 
0x000000000041140b: mov rax, rbp; pop rbp; pop r12; ret; 
0x00000000004113fb: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000404e72: mov rax, rcx; cmovae rax, r8; add rax, 6; ret; 
0x0000000000401608: mov rax, rdx; shl rax, 0x10; or rax, r15; pop r15; ret; 
0x0000000000401194: mov rdi, 0x401160; call qword ptr [rip + 0x1ae4f]; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000408e2b: mov rdi, qword ptr [rdi + 0x50]; call rax; mov qword ptr [rbx + 0x38], 0; xor eax, eax; pop rbx; ret; 
0x00000000004129a3: mov rdi, qword ptr [rsp + 8]; mov eax, dword ptr [rdi + 0x40]; add rsp, 0x18; ret; 
0x000000000041251a: mov rdi, rbx; call 0x11aa0; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000041307f: mov rdi, rcx; call 0x11aa0; xor eax, eax; pop rbx; ret; 
0x0000000000412570: mov rdi, rcx; call 0x12330; xor edx, edx; div rbx; pop rbx; ret; 
0x0000000000413061: mov rdi, rcx; call 0x12da0; xor edx, edx; div rbx; pop rbx; ret; 
0x0000000000401164: mov rdi, rsp; call 0x10f0; xor eax, eax; add rsp, 0x18; ret; 
0x00000000004102a8: mov word ptr [rax + 0x1730], dx; mov dword ptr [rax + 0x1734], 0; ret; 
0x0000000000410166: mov word ptr [rdi + 0x1730], ax; mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000404d9f: movabs dword ptr [0x441f0f1572fe], eax; mov esi, 0xfffffffe; mov eax, esi; ret; 
0x0000000000407424: movabs dword ptr [0xfffffffeb81872d0], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004048ca: movabs dword ptr [0xfffffffeb81a72d0], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000404c0c: movabs dword ptr [0xfffffffeb91872f9], eax; mov eax, ecx; ret; 
0x0000000000404b8c: movabs dword ptr [0xfffffffeba1872ca], eax; mov eax, edx; ret; 
0x000000000040a2de: movups xmmword ptr [rax + 0x68], xmm0; mov eax, edx; ret; 
0x000000000040ff63: movups xmmword ptr [rdi + 0x1718], xmm0; ret; 
0x0000000000410be6: movzx eax, al; ret; 
0x0000000000410c3b: nop dword ptr [rax + rax]; lea rax, [rip + 0x7939]; ret; 
0x0000000000410c48: nop dword ptr [rax + rax]; mov eax, 0xa9; ret; 
0x0000000000406758: nop dword ptr [rax + rax]; mov eax, 0xfffffffe; ret; 
0x00000000004047c8: nop dword ptr [rax + rax]; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x000000000041192b: nop dword ptr [rax + rax]; mov edx, dword ptr [rbx + 0x88]; pop rbx; sub rax, rdx; ret; 
0x000000000040d668: nop dword ptr [rax + rax]; mov edx, dword ptr [rdx + 0x5c]; add rax, rdx; ret; 
0x0000000000404da3: nop dword ptr [rax + rax]; mov esi, 0xfffffffe; mov eax, esi; ret; 
0x000000000040d658: nop dword ptr [rax + rax]; mov rax, 0xffffffffffff0000; ret; 
0x000000000041193b: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; pop rbx; ret; 
0x000000000040d6d8: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000004011a4: nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000411a8b: nop dword ptr [rax + rax]; ret; 
0x0000000000404ed5: nop dword ptr [rax]; cmp edi, esi; cmovae rcx, r8; add rax, rcx; ret; 
0x0000000000401b2d: nop dword ptr [rax]; lea rax, [rip + 0x14569]; ret; 
0x000000000040d545: nop dword ptr [rax]; mov dword ptr [rdx + 0x1be8], 1; mov eax, 0xfffffffd; ret; 
0x0000000000407709: nop dword ptr [rax]; mov eax, 0xfffffffa; ret; 
0x0000000000404974: nop dword ptr [rax]; mov eax, 0xfffffffe; ret; 
0x0000000000411511: nop dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000411454: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x00000000004119c1: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x54]; ret; 
0x000000000040a2e5: nop dword ptr [rax]; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x0000000000411a14: nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004011ac: nop dword ptr [rax]; ret; 
0x0000000000406bc7: nop dword ptr cs:[rax + rax]; mov eax, 0xfffffffe; ret; 
0x000000000040ce97: nop dword ptr cs:[rax + rax]; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x000000000040d6d7: nop dword ptr cs:[rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000004011a3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000406757: nop word ptr [rax + rax]; mov eax, 0xfffffffe; ret; 
0x000000000041192a: nop word ptr [rax + rax]; mov edx, dword ptr [rbx + 0x88]; pop rbx; sub rax, rdx; ret; 
0x0000000000411a8a: nop word ptr [rax + rax]; ret; 
0x0000000000406bc6: nop word ptr cs:[rax + rax]; mov eax, 0xfffffffe; ret; 
0x000000000040ce96: nop word ptr cs:[rax + rax]; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x000000000040d6d6: nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000004011a2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000040ff5b: or al, 0x17; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rdi + 0x1718], xmm0; ret; 
0x0000000000410bde: or al, 0x17; add byte ptr [rax], al; sete al; pop rbx; movzx eax, al; ret; 
0x0000000000403101: or al, 0x85; ror byte ptr [rdi], cl; xchg esp, eax; ret 0x8341; 
0x0000000000410118: or al, 2; sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x0000000000410162: or al, 2; xor eax, eax; mov word ptr [rdi + 0x1730], ax; mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000410ffd: or al, ch; or eax, 0x48fffffe; add esp, 0x18; ret; 
0x00000000004120a6: or byte ptr [r11 + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000402103: or byte ptr [rax + 0x31], cl; ror byte ptr [rax - 0x77], 1; ret 0xb60f; 
0x0000000000410ff8: or byte ptr [rax - 0x73], cl; and al, 8; call 0x10e10; add rsp, 0x18; ret; 
0x0000000000412316: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x000000000040a424: or byte ptr [rax - 2], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040d208: or byte ptr [rbp - 0x3f334f], cl; inc dword ptr [rbx + 0x4761ffe]; ret; 
0x000000000040d61a: or byte ptr [rbp - 0x3f334f], cl; inc dword ptr [rbx + 0xa761ffe]; ret; 
0x000000000040d538: or byte ptr [rbp - 0x3f3372], cl; inc dword ptr [rbx + 0x4761ff9]; ret; 
0x000000000040a244: or byte ptr [rbp - 0x3f3372], cl; inc dword ptr [rbx + 0x8761ff9]; mov eax, edx; ret; 
0x000000000040d6aa: or byte ptr [rbp - 0x3f3372], cl; inc dword ptr [rbx + 0xa761ff9]; ret; 
0x00000000004120a7: or byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000040a175: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004048d6: or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000040ce68: or byte ptr [rcx + 0x3f34e9], al; add byte ptr [rbx + 0xc761ff9], al; mov eax, edx; ret; 
0x000000000040a87a: or byte ptr [rcx + 0x3f34ef], al; add byte ptr [rbx + 0xa761fff], al; ret; 
0x0000000000413acf: or byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000040c449: or byte ptr [rcx + 1], cl; test byte ptr [rcx + rdi - 0x2f], 0x72; fimul word ptr [rcx + 0x29c189cb]; ret; 
0x0000000000413283: or byte ptr [rcx + rcx*4 - 0x18], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040a583: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000041282c: or byte ptr [rdi], cl; sahf; ret 0xd008; 
0x00000000004114e4: or dword ptr [rax], 0; add byte ptr [rax], al; pop rbx; ret; 
0x000000000040b90d: or dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; mov dh, 0x55; add eax, dword ptr [rbx - 0x72b6fb13]; add al, 0x83; ret; 
0x000000000040b603: or dword ptr [rax], eax; add byte ptr [rcx], ch; ret; 
0x00000000004119b6: or dword ptr [rcx + 0x1c4f187f], eax; add byte ptr [rax], al; je 0x119c8; ret; 
0x0000000000410e02: or eax, 0x19efc148; add rax, rdx; add rax, rdi; ret; 
0x0000000000410fff: or eax, 0x48fffffe; add esp, 0x18; ret; 
0x000000000041151f: or eax, 0xffffffff; ret; 
0x000000000040f3ef: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x7d], 1; ret 0x4901; 
0x000000000040fa54: or eax, dword ptr [rax]; add byte ptr [rcx + 1], al; ret 0xb70f; 
0x00000000004075f2: or eax, dword ptr [rax]; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000040fa4c: or eax, dword ptr [rax]; add byte ptr [rdi + rcx - 0x49], al; sub dword ptr [rdx + 0x4100000b], 1; ret 0xb70f; 
0x0000000000401a4a: or eax, ecx; ret; 
0x0000000000401462: or eax, edi; pop r15; ret; 
0x0000000000401655: or eax, edx; ret; 
0x0000000000411949: or rax, 0xffffffffffffffff; ret; 
0x0000000000401461: or rax, r15; pop r15; ret; 
0x0000000000401a49: or rax, rcx; ret; 
0x0000000000401654: or rax, rdx; ret; 
0x000000000040e56a: out 0x83, eax; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7f839], al; ret 0x4904; 
0x000000000040b98a: out dx, al; add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000040ce85: out dx, al; xor edx, edx; mov qword ptr [rax + 0x30], rsi; mov dword ptr [rsi + 0x48], 0; mov eax, edx; ret; 
0x0000000000404c08: out dx, eax; bt rcx, rdi; jb 0x4c28; mov ecx, 0xfffffffe; mov eax, ecx; ret; 
0x0000000000412ab2: out dx, eax; ror byte ptr [rbx - 0x72b7a78d], 5; ret 0x5a; 
0x0000000000410e05: out dx, eax; sbb dword ptr [rax + 1], ecx; ror byte ptr [rax + 1], 1; clc; ret; 
0x000000000040a87c: out dx, eax; xor al, 0x3f; add byte ptr [rax], al; cmp edi, 0x1f; jbe 0xa890; ret; 
0x0000000000407754: outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000040a2b1: outsb dx, byte ptr [rsi]; ret 0x8b48; 
0x000000000040f612: outsb dx, byte ptr [rsi]; ret 0xf44; 
0x00000000004093d2: outsd dx, dword ptr [rsi]; insd dword ptr [rdi], dx; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000004093f4: outsd dx, dword ptr [rsi]; ret 0x110f; 
0x000000000040f117: pop r12; pop r13; mov dword ptr [rax + 0x1734], r8d; pop r14; pop r15; ret; 
0x0000000000401937: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000404cbb: pop r12; pop r13; pop r14; ret; 
0x000000000040a178: pop r12; pop r13; ret; 
0x000000000040726d: pop r12; ret; 
0x000000000040f119: pop r13; mov dword ptr [rax + 0x1734], r8d; pop r14; pop r15; ret; 
0x000000000040145d: pop r13; pop r14; or rax, r15; pop r15; ret; 
0x0000000000401939: pop r13; pop r14; pop r15; ret; 
0x0000000000404cbd: pop r13; pop r14; ret; 
0x000000000040a17a: pop r13; ret; 
0x000000000040145f: pop r14; or rax, r15; pop r15; ret; 
0x0000000000402a2b: pop r14; pop r15; ret; 
0x0000000000404cbf: pop r14; ret; 
0x000000000040164a: pop r15; cmova rax, rcx; shl rax, 0x10; or rax, rdx; ret; 
0x0000000000401464: pop r15; ret; 
0x000000000040a2d9: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x68], xmm0; mov eax, edx; ret; 
0x000000000040d224: pop rax; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000040a8ee: pop rax; ret; 
0x000000000040f11a: pop rbp; mov dword ptr [rax + 0x1734], r8d; pop r14; pop r15; ret; 
0x0000000000406cef: pop rbp; mov eax, edx; ret; 
0x0000000000401936: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000404cba: pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040a177: pop rbp; pop r12; pop r13; ret; 
0x000000000040726c: pop rbp; pop r12; ret; 
0x000000000040145e: pop rbp; pop r14; or rax, r15; pop r15; ret; 
0x0000000000412917: pop rbp; pop r14; pop r15; ret; 
0x0000000000404cbe: pop rbp; pop r14; ret; 
0x000000000040124d: pop rbp; ret; 
0x00000000004120c4: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000040cc5a: pop rbx; mov eax, edx; ret; 
0x000000000041140a: pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000410be5: pop rbx; movzx eax, al; ret; 
0x0000000000406cee: pop rbx; pop rbp; mov eax, edx; ret; 
0x00000000004067d5: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040a176: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040726b: pop rbx; pop rbp; pop r12; ret; 
0x00000000004026f0: pop rbx; pop rbp; ret; 
0x0000000000411936: pop rbx; sub rax, rdx; ret; 
0x00000000004120a8: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000408e3b: pop rbx; ret; 
0x000000000040164b: pop rdi; cmova rax, rcx; shl rax, 0x10; or rax, rdx; ret; 
0x0000000000401465: pop rdi; ret; 
0x0000000000403f62: pop rdx; ret; 
0x0000000000401460: pop rsi; or rax, r15; pop r15; ret; 
0x000000000040193c: pop rsi; pop r15; ret; 
0x0000000000404cc0: pop rsi; ret; 
0x000000000040d672: pop rsp; add rax, rdx; ret; 
0x000000000040d653: pop rsp; add rax, rsi; ret; 
0x000000000040f118: pop rsp; pop r13; mov dword ptr [rax + 0x1734], r8d; pop r14; pop r15; ret; 
0x0000000000401938: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000404cbc: pop rsp; pop r13; pop r14; ret; 
0x000000000040a179: pop rsp; pop r13; ret; 
0x000000000040726e: pop rsp; ret; 
0x00000000004115a8: push 0x48e80148; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004028f2: push qword ptr [r9]; clc; test r8d, edx; jne 0x28d0; xor eax, esi; ret; 
0x0000000000412310: push qword ptr [rbp - 0x37]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000402836: push qword ptr [rbp - 0x50]; ret; 
0x000000000041191c: push qword ptr [rcx + riz - 0x7f]; jnp 0x1193a; sbb al, 0; add byte ptr [rax + rcx + 0x5b], dh; ret; 
0x000000000041197c: push qword ptr [rcx + riz - 0x7f]; jnp 0x1199a; sbb al, 0; add byte ptr [rax + rcx + 0x5b], dh; ret; 
0x0000000000412577: push qword ptr [rcx]; ror byte ptr [rax - 9], cl; pop rbx; ret; 
0x0000000000413020: push qword ptr [rcx]; shr bl, 0xdf; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004028f3: push qword ptr [rcx]; clc; test r8d, edx; jne 0x28d0; xor eax, esi; ret; 
0x00000000004119c9: push r12; ret; 
0x0000000000408e2e: push rax; call rax; mov qword ptr [rbx + 0x38], 0; xor eax, eax; pop rbx; ret; 
0x000000000040a8be: push rax; mov qword ptr [rsi + 0x50], rax; xor eax, eax; ret; 
0x000000000040a8e8: push rax; xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x000000000040a8c2: push rax; xor eax, eax; ret; 
0x000000000040b3ed: push rbp; add eax, dword ptr [rbx - 0x72b6fb13]; add al, 0x83; ret; 
0x00000000004030af: push rcx; and byte ptr [rbx - 0x73ed540], al; add edi, dword ptr [rcx]; ret 0x820f; 
0x000000000040d223: push rdx; pop rax; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000040d671: push rdx; pop rsp; add rax, rdx; ret; 
0x0000000000406cec: push rdx; std; pop rbx; pop rbp; mov eax, edx; ret; 
0x000000000040c594: push rsi; ret 0xf40; 
0x00000000004119ca: push rsp; ret; 
0x00000000004057e4: rcl cl, 1; call 0xffffffffe8c227ec; add al, 0x89; ret 0xe2c1; 
0x000000000040436d: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; pop r15; ret; 
0x00000000004120aa: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000040692a: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000040a585: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000004075f6: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000004047c4: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000407c32: ret 0; 
0x000000000040b7bc: ret 0x101; 
0x0000000000406394: ret 0x102; 
0x00000000004093f5: ret 0x110f; 
0x000000000040265a: ret 0x119; 
0x000000000040ad7b: ret 0x13e9; 
0x00000000004016fa: ret 0x14c; 
0x00000000004010f2: ret 0x1ae; 
0x0000000000404ca8: ret 0x1e72; 
0x0000000000402ecf: ret 0x2344; 
0x00000000004089cd: ret 0x2941; 
0x000000000040b0e7: ret 0x2944; 
0x00000000004035e6: ret 0x2948; 
0x00000000004075b1: ret 0x2b49; 
0x00000000004030fa: ret 0x2b73; 
0x0000000000402f91: ret 0x2b8; 
0x0000000000411199: ret 0x2c1; 
0x000000000040a12c: ret 0x3944; 
0x00000000004032ca: ret 0x3948; 
0x000000000040c253: ret 0x3be9; 
0x0000000000401a33: ret 0x3d48; 
0x00000000004036d5: ret 0x3de9; 
0x000000000040d016: ret 0x4001; 
0x0000000000406376: ret 0x4008; 
0x000000000040bd25: ret 0x4101; 
0x000000000040e5a6: ret 0x4104; 
0x00000000004057f2: ret 0x428d; 
0x000000000040d0eb: ret 0x4401; 
0x00000000004031b2: ret 0x4489; 
0x00000000004093bb: ret 0x4501; 
0x00000000004031a0: ret 0x460f; 
0x000000000040b47e: ret 0x470f; 
0x000000000040c085: ret 0x47e9; 
0x00000000004027e2: ret 0x4801; 
0x0000000000403c7a: ret 0x4803; 
0x000000000040901f: ret 0x4808; 
0x0000000000409127: ret 0x4810; 
0x00000000004063ae: ret 0x4890; 
0x000000000040f3fb: ret 0x4901; 
0x000000000040e574: ret 0x4904; 
0x0000000000408f0d: ret 0x4910; 
0x0000000000406326: ret 0x4c03; 
0x000000000040f752: ret 0x57d; 
0x0000000000412aba: ret 0x5a; 
0x000000000040fbef: ret 0x5be9; 
0x0000000000402a26: ret 0x5c41; 
0x0000000000410ae0: ret 0x60e9; 
0x000000000040f1d5: ret 0x6349; 
0x000000000040f508: ret 0x634c; 
0x0000000000403c16: ret 0x63eb; 
0x00000000004083c2: ret 0x6602; 
0x0000000000409888: ret 0x6630; 
0x0000000000410c73: ret 0x66c3; 
0x00000000004019ae: ret 0x6948; 
0x0000000000406a98: ret 0x708d; 
0x0000000000402669: ret 0x7401; 
0x0000000000406d28: ret 0x7c83; 
0x000000000040c911: ret 0x7de9; 
0x0000000000411c1c: ret 0x7ee8; 
0x00000000004030b8: ret 0x820f; 
0x000000000040c80c: ret 0x82e9; 
0x000000000040ad2d: ret 0x830f; 
0x0000000000403106: ret 0x8341; 
0x0000000000405982: ret 0x8348; 
0x0000000000403610: ret 0x8389; 
0x000000000040310f: ret 0x850f; 
0x000000000040393e: ret 0x8548; 
0x0000000000403b4f: ret 0x8901; 
0x0000000000405c32: ret 0x8941; 
0x0000000000412f8d: ret 0x8945; 
0x0000000000401607: ret 0x8948; 
0x000000000040ae93: ret 0x894d; 
0x000000000040bad1: ret 0x8b41; 
0x00000000004057cf: ret 0x8b48; 
0x000000000040ee2a: ret 0x8d41; 
0x000000000040854e: ret 0x8d42; 
0x0000000000401671: ret 0x8d48; 
0x000000000040147f: ret 0x8d4c; 
0x000000000040f4d0: ret 0x8f0f; 
0x0000000000412c08: ret 0x92e8; 
0x00000000004035f9: ret 0x9e9; 
0x000000000041038f: ret 0xa; 
0x000000000040f267: ret 0xa6eb; 
0x000000000040637f: ret 0xa73; 
0x000000000040c37d: ret 0xac; 
0x0000000000401472: ret 0xb60f; 
0x000000000040fa59: ret 0xb70f; 
0x00000000004019c6: ret 0xb848; 
0x000000000040e4f9: ret 0xba41; 
0x0000000000406811: ret 0xbc73; 
0x00000000004027ff: ret 0xc031; 
0x0000000000403f12: ret 0xc083; 
0x00000000004031a3: ret 0xc085; 
0x000000000040ba5a: ret 0xc139; 
0x00000000004013ee: ret 0xc148; 
0x00000000004089cb: ret 0xc229; 
0x0000000000406392: ret 0xc281; 
0x000000000040bec9: ret 0xc5e9; 
0x000000000040add9: ret 0xc789; 
0x000000000040b9c7: ret 0xc7e9; 
0x0000000000408522: ret 0xc883; 
0x000000000040bcc6: ret 0xc8e9; 
0x000000000040fae1: ret 0xc901; 
0x0000000000403430: ret 0xca08; 
0x0000000000411bde: ret 0xca39; 
0x000000000041282f: ret 0xd008; 
0x0000000000405383: ret 0xd009; 
0x000000000040ac11: ret 0xd089; 
0x000000000040596f: ret 0xd201; 
0x00000000004057ed: ret 0xe2c1; 
0x000000000040677a: ret 0xe902; 
0x0000000000406771: ret 0xe903; 
0x0000000000406768: ret 0xe904; 
0x0000000000406783: ret 0xe905; 
0x0000000000406795: ret 0xe906; 
0x000000000040678c: ret 0xe907; 
0x000000000040a6d9: ret 0xeb05; 
0x000000000040bc1f: ret 0xf01; 
0x0000000000402fa9: ret 0xf04; 
0x000000000041058c: ret 0xf175; 
0x000000000040ba88: ret 0xf20; 
0x0000000000408a4c: ret 0xf301; 
0x000000000040c596: ret 0xf40; 
0x0000000000402ea2: ret 0xf41; 
0x00000000004019b8: ret 0xf44; 
0x000000000040c6d3: ret 0xf45; 
0x0000000000402f99: ret 0xf48; 
0x0000000000403bbb: ret 0xf631; 
0x00000000004030c7: ret 0xf789; 
0x000000000040b694: ret 0xfae9; 
0x0000000000411a12: ret 0xfc3; 
0x00000000004136da: ret 0xfed9; 
0x00000000004013f5: ret 0xfff1; 
0x00000000004039be: ret 0xfffd; 
0x0000000000404b8d: retf 0x1872; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x0000000000401c1f: retf 0x314d; ret; 
0x000000000040f4ab: retf 0x8949; ret; 
0x00000000004015f9: retf 0xc148; call 0xffffffffc0695e10; int1; inc dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x0000000000404dc9: rol byte ptr [rax], 1; add byte ptr [rax], al; mov dword ptr [rax + 0xbc], r8d; mov eax, esi; ret; 
0x000000000040a8e1: rol byte ptr [rbp + 0x31], 0xc0; mov qword ptr [rsi + 0x50], rax; xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x000000000040f4cd: rol byte ptr [rbp + 0x39], cl; ret 0x8f0f; 
0x0000000000412825: rol byte ptr [rbp + 0x748948d2], 0x24; or byte ptr [rdi], cl; sahf; ret 0xd008; 
0x000000000040282a: rol byte ptr [rbp + rax*4 - 0x32], 1; jne 0x2808; add r10d, 1; sar rdi, 1; jne 0x27e9; ret; 
0x00000000004028aa: rol byte ptr [rbp + rax*4 - 0x32], 1; jne 0x2888; add r10d, 1; sar rdi, 1; jne 0x2869; ret; 
0x0000000000405971: rol byte ptr [rbx + 0xc8d0138], cl; mov al, byte ptr [rax - 0x7cb70027]; js 0x59a7; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x000000000040e562: rol byte ptr [rbx + rax*4], 0xf9; add dword ptr [rcx], ebx; inc dword ptr [rcx + 0x83e7]; add byte ptr [rbx - 0x7cb7f839], al; ret 0x4904; 
0x0000000000406cd7: rol byte ptr [rbx - 0x38b78e03], cl; cmp byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8348; 
0x000000000040448a: rol byte ptr [rbx], 0x5d; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040a8ea: rol byte ptr [rcx + rcx*4 + 0x46], 0x58; ret; 
0x000000000040f74f: rol byte ptr [rcx], 0x39; ret 0x57d; 
0x000000000040bd22: rol byte ptr [rcx], 0x83; ret 0x4101; 
0x0000000000407ad7: rol byte ptr [rcx], 0x83; ret 0x4104; 
0x0000000000410add: rol dword ptr [rbx], 9; ret 0x60e9; 
0x0000000000411a0e: ror byte ptr [rax + 0xf], 0x44; ret 0xfc3; 
0x0000000000410e09: ror byte ptr [rax + 1], 1; clc; ret; 
0x000000000040a8e4: ror byte ptr [rax - 0x77], 0x46; push rax; xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x00000000004020f4: ror byte ptr [rax - 0x77], 1; ret 0xb60f; 
0x0000000000407141: ror byte ptr [rax - 0x77], 1; ret; 
0x0000000000412827: ror byte ptr [rax - 0x77], cl; je 0x12850; or byte ptr [rdi], cl; sahf; ret 0xd008; 
0x0000000000404baf: ror byte ptr [rax - 0x77], cl; jo 0x4bec; mov eax, edx; ret; 
0x000000000040ce87: ror byte ptr [rax - 0x77], cl; jo 0xcebc; mov dword ptr [rsi + 0x48], 0; mov eax, edx; ret; 
0x00000000004119b1: ror byte ptr [rax - 0x7b], 0xff; je 0x119c0; cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x119c8; ret; 
0x000000000040a171: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000412579: ror byte ptr [rax - 9], cl; pop rbx; ret; 
0x0000000000412ab3: ror byte ptr [rbx - 0x72b7a78d], 5; ret 0x5a; 
0x000000000040f3ee: ror byte ptr [rbx], 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x7d], 1; ret 0x4901; 
0x000000000040f78b: ror byte ptr [rcx + 0xf], 0xaf; ret; 
0x000000000040a76e: ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000403c13: ror byte ptr [rdi], 0x95; ret 0x63eb; 
0x000000000040342d: ror byte ptr [rdi], 0x95; ret 0xca08; 
0x0000000000403103: ror byte ptr [rdi], cl; xchg esp, eax; ret 0x8341; 
0x0000000000405965: ror dword ptr [rax - 0x75], 0x76; adc byte ptr [rbp - 0x7b], al; fisttp dword ptr [rdi]; xchg ebp, eax; ret 0xd201; 
0x0000000000407492: ror dword ptr [rax - 0x77], 1; ret; 
0x000000000040f3f8: ror dword ptr [rax - 0x7d], 1; ret 0x4901; 
0x000000000040d5b8: sal byte ptr [rbp + 0x25], cl; and edx, 0xfffffffb; mov dword ptr [rax + 0x10], edx; xor edx, edx; mov eax, edx; ret; 
0x000000000040a687: sal byte ptr [rbp + 0x66], 0x48; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000040a7b6: sal byte ptr [rbp + 0x67], 0x48; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000412504: sal byte ptr [rbp + rax - 0x7d], cl; cli; sti; jne 0x12522; pop rbx; ret; 
0x00000000004028f8: sal byte ptr [rbp - 0x2b], 1; xor eax, esi; ret; 
0x0000000000412546: sal byte ptr [rdi + rcx - 0x7d], 0xf8; sti; je 0x12558; xor eax, eax; pop rbx; ret; 
0x0000000000407425: sal byte ptr [rdx + 0x18], 1; mov eax, 0xfffffffe; pop rbx; pop rbp; pop r12; ret; 
0x00000000004048cb: sal byte ptr [rdx + 0x1a], 1; mov eax, 0xfffffffe; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040100d: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000041188e: sal byte ptr [rsi + rdx + 0x48], cl; add eax, dword ptr [rdi + 0x68]; ret; 
0x0000000000413058: sal byte ptr [rsp + rbp + 0x48], 0x89; ret 0x8948; 
0x0000000000412567: sal byte ptr [rsp + riz*8 + 0x48], 0x89; ret 0x8948; 
0x000000000040e5ba: sal dword ptr [rbp - 0x42], cl; ret; 
0x000000000040a248: sar bh, 0xff; cmp ecx, 0x1f; jbe 0xa258; mov eax, edx; ret; 
0x000000000040a328: sar bh, 0xff; cmp ecx, 0x1f; jbe 0xa338; mov eax, edx; ret; 
0x000000000040d53c: sar bh, 0xff; cmp ecx, 0x1f; jbe 0xd548; ret; 
0x000000000040d6ae: sar bh, 0xff; cmp ecx, 0x1f; jbe 0xd6c0; ret; 
0x000000000040d20c: sar bh, 0xff; cmp esi, 0x1f; jbe 0xd218; ret; 
0x000000000040d61e: sar bh, 0xff; cmp esi, 0x1f; jbe 0xd630; ret; 
0x0000000000412ffa: sar byte ptr [rax + 0x13], cl; mov edx, edx; call 0x12da0; add rsp, 8; ret; 
0x000000000040e5b2: sar byte ptr [rdi + 6], 0x49; cmp ebx, edx; jne 0xe57b; ret; 
0x000000000040d6d2: sar eax, 2; ret; 
0x0000000000402835: sar edi, 1; jne 0x27e9; ret; 
0x00000000004028b5: sar edi, 1; jne 0x2869; ret; 
0x000000000040d6d1: sar rax, 2; ret; 
0x0000000000402834: sar rdi, 1; jne 0x27e9; ret; 
0x00000000004028b4: sar rdi, 1; jne 0x2869; ret; 
0x0000000000411923: sbb al, 0; add byte ptr [rax + rcx + 0x5b], dh; ret; 
0x0000000000412be2: sbb al, 0x39; ret 0xf48; 
0x000000000040abeb: sbb al, byte ptr [rax]; add byte ptr [rcx + 0xf], al; mov dh, 0x45; add eax, dword ptr [rbx - 0x72b2fb13]; add al, 0x83; ret; 
0x00000000004048cd: sbb bh, byte ptr [rax - 2]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000410ff3: sbb byte ptr [rax - 0x77], cl; and al, 8; lea rcx, [rsp + 8]; call 0x10e10; add rsp, 0x18; ret; 
0x000000000041281f: sbb byte ptr [rax - 0x7b], cl; test byte ptr [rdi], -0x6c; rol byte ptr [rbp + 0x748948d2], 0x24; or byte ptr [rdi], cl; sahf; ret 0xd008; 
0x0000000000407427: sbb byte ptr [rax - 2], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000407267: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000404c0f: sbb byte ptr [rcx - 2], bh; mov eax, ecx; ret; 
0x000000000040c80a: sbb byte ptr [rcx], ch; ret 0x82e9; 
0x000000000040b692: sbb byte ptr [rcx], ch; ret 0xfae9; 
0x0000000000411921: sbb byte ptr [rdi + 0x1c], cl; add byte ptr [rax], al; je 0x11930; pop rbx; ret; 
0x0000000000411981: sbb byte ptr [rdi + 0x1c], cl; add byte ptr [rax], al; je 0x11990; pop rbx; ret; 
0x00000000004119b9: sbb byte ptr [rdi + 0x1c], cl; add byte ptr [rax], al; je 0x119c8; ret; 
0x0000000000412977: sbb byte ptr [rdi + 0x1c], cl; add byte ptr [rax], al; je 0x12988; mov eax, dword ptr [rdi + 0x40]; ret; 
0x000000000040ff66: sbb byte ptr [rdi], dl; add byte ptr [rax], al; ret; 
0x0000000000404b8f: sbb byte ptr [rdx - 2], bh; mov eax, edx; ret; 
0x0000000000410e06: sbb dword ptr [rax + 1], ecx; ror byte ptr [rax + 1], 1; clc; ret; 
0x0000000000411a00: sbb dword ptr [rax - 0x75], ecx; js 0x11a4e; lea edx, [rip + 0x6c03]; test rax, rax; cmove rax, rdx; ret; 
0x000000000041102a: sbb dword ptr [rax], eax; add byte ptr [rax - 2], bh; ret; 
0x0000000000406c4e: sbb dword ptr [rdx - 2], edi; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000040d64e: sbb eax, dword ptr [rax]; add byte ptr [rbx], ch; jb 0xd6b0; add rax, rsi; ret; 
0x000000000040d54b: sbb eax, dword ptr [rax]; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 3], bh; ret; 
0x000000000040119e: scasb al, byte ptr [rdi]; add dword ptr [rax], eax; hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000040f78e: scasd eax, dword ptr [rdi]; ret; 
0x0000000000410be2: sete al; pop rbx; movzx eax, al; ret; 
0x000000000040d229: sete al; ret; 
0x000000000040fadd: shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xc901; 
0x0000000000410165: shl byte ptr [rsi - 0x77], 0x87; xor byte ptr [rdi], dl; add byte ptr [rax], al; mov dword ptr [rdi + 0x1734], 0; ret; 
0x00000000004102a7: shl byte ptr [rsi - 0x77], cl; nop; xor byte ptr [rdi], dl; add byte ptr [rax], al; mov dword ptr [rax + 0x1734], 0; ret; 
0x0000000000409034: shl dword ptr [rcx], cl; ret; 
0x000000000040160c: shl eax, 0x10; or rax, r15; pop r15; ret; 
0x0000000000401a46: shl eax, 0x10; or rax, rcx; ret; 
0x0000000000401651: shl eax, 0x10; or rax, rdx; ret; 
0x000000000040145a: shl eax, 0x10; pop r13; pop r14; or rax, r15; pop r15; ret; 
0x000000000040a8b9: shl eax, cl; add rax, qword ptr [rsi + 0x50]; mov qword ptr [rsi + 0x50], rax; xor eax, eax; ret; 
0x000000000040160b: shl rax, 0x10; or rax, r15; pop r15; ret; 
0x0000000000401a45: shl rax, 0x10; or rax, rcx; ret; 
0x0000000000401650: shl rax, 0x10; or rax, rdx; ret; 
0x0000000000401459: shl rax, 0x10; pop r13; pop r14; or rax, r15; pop r15; ret; 
0x0000000000413022: shr bl, 0xdf; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004030b2: shr byte ptr [rdx], 0xc1; clc; add edi, dword ptr [rcx]; ret 0x820f; 
0x000000000041026c: shr dword ptr [rax + 0x1730], 8; ret; 
0x0000000000410122: shr dword ptr [rdi + 0x1730], 8; ret; 
0x0000000000410e04: shr edi, 0x19; add rax, rdx; add rax, rdi; ret; 
0x0000000000410dfb: shr edx, 0xe; lea rax, [rdi + rax + 0xd]; shr rdi, 0x19; add rax, rdx; add rax, rdi; ret; 
0x0000000000404ec5: shr esi, 0xe; add rcx, r9; add rcx, rsi; add rdx, rcx; add rax, rdx; ret; 
0x0000000000410e03: shr rdi, 0x19; add rax, rdx; add rax, rdi; ret; 
0x0000000000410dfa: shr rdx, 0xe; lea rax, [rdi + rax + 0xd]; shr rdi, 0x19; add rax, rdx; add rax, rdi; ret; 
0x0000000000404ec4: shr rsi, 0xe; add rcx, r9; add rcx, rsi; add rdx, rcx; add rax, rdx; ret; 
0x000000000041026b: shr word ptr [rax + 0x1730], 8; ret; 
0x0000000000410121: shr word ptr [rdi + 0x1730], 8; ret; 
0x000000000040fa53: stosb byte ptr [rdi], al; or eax, dword ptr [rax]; add byte ptr [rcx + 1], al; ret 0xb70f; 
0x00000000004030b3: sub al, cl; clc; add edi, dword ptr [rcx]; ret 0x820f; 
0x0000000000405c2c: sub byte ptr [r9], dil; ret 0x460f; 
0x000000000040319d: sub byte ptr [r9], r15b; ret 0x460f; 
0x0000000000410160: sub byte ptr [rax - 0x3fcefdf4], cl; mov word ptr [rdi + 0x1730], ax; mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000411c69: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11e01; add rsp, 0x10; pop rbx; ret; 
0x00000000004125f7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1262f; add rsp, 0x18; ret; 
0x0000000000412697: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x126cf; add rsp, 0x18; ret; 
0x000000000040cf1a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd1cf; add rsp, 0x10; pop rbx; ret; 
0x000000000040319e: sub byte ptr [rcx], bh; ret 0x460f; 
0x0000000000412a8b: sub byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000410264: sub dword ptr [rax + 0x1734], 8; shr word ptr [rax + 0x1730], 8; ret; 
0x000000000041011a: sub dword ptr [rdi + 0x1734], 8; shr word ptr [rdi + 0x1730], 8; ret; 
0x000000000040fa52: sub dword ptr [rdx + 0x4100000b], 1; ret 0xb70f; 
0x000000000040d6cf: sub eax, ecx; sar rax, 2; ret; 
0x0000000000410c6c: sub eax, edi; cdqe; mov rax, qword ptr [rdx + rax*8]; ret; 
0x0000000000411938: sub eax, edx; ret; 
0x000000000040ce69: sub ecx, 0x3f34; cmp ecx, 0x1f; jbe 0xce80; mov eax, edx; ret; 
0x000000000040d599: sub ecx, 0x3f34; cmp ecx, 0x1f; jbe 0xd5b0; mov eax, edx; ret; 
0x0000000000404b87: sub ecx, 0x45; bt rdx, rcx; jb 0x4ba8; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x000000000040a87b: sub edi, 0x3f34; cmp edi, 0x1f; jbe 0xa890; ret; 
0x0000000000404c07: sub edi, 0x45; bt rcx, rdi; jb 0x4c28; mov ecx, 0xfffffffe; mov eax, ecx; ret; 
0x00000000004125f4: sub edx, dword ptr [0x28]; jne 0x1262f; add rsp, 0x18; ret; 
0x0000000000412694: sub edx, dword ptr [0x28]; jne 0x126cf; add rsp, 0x18; ret; 
0x0000000000401606: sub edx, eax; mov rax, rdx; shl rax, 0x10; or rax, r15; pop r15; ret; 
0x000000000040d651: sub esi, dword ptr [rdx + 0x5c]; add rax, rsi; ret; 
0x0000000000401161: sub esp, 0x18; mov rdi, rsp; call 0x10f0; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000413bc5: sub esp, 8; add rsp, 8; ret; 
0x000000000040d6ce: sub rax, rcx; sar rax, 2; ret; 
0x0000000000411937: sub rax, rdx; ret; 
0x00000000004125f3: sub rdx, qword ptr [0x28]; jne 0x1262f; add rsp, 0x18; ret; 
0x0000000000412693: sub rdx, qword ptr [0x28]; jne 0x126cf; add rsp, 0x18; ret; 
0x00000000004125f2: sub rdx, qword ptr fs:[0x28]; jne 0x1262f; add rsp, 0x18; ret; 
0x0000000000412692: sub rdx, qword ptr fs:[0x28]; jne 0x126cf; add rsp, 0x18; ret; 
0x0000000000401605: sub rdx, rax; mov rax, rdx; shl rax, 0x10; or rax, r15; pop r15; ret; 
0x0000000000401160: sub rsp, 0x18; mov rdi, rsp; call 0x10f0; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000413bc4: sub rsp, 8; add rsp, 8; ret; 
0x000000000040646a: test byte ptr [rax - 0x75], -0x7f; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8548; 
0x0000000000410c4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xa9; ret; 
0x000000000040675a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xfffffffe; ret; 
0x00000000004047ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edx, 0xfffffffe; mov eax, edx; ret; 
0x000000000040d66a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rdx + 0x5c]; add rax, rdx; ret; 
0x000000000040d65a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffff0000; ret; 
0x000000000040d6da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x00000000004011a6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x000000000040c44c: test byte ptr [rcx + rdi - 0x2f], 0x72; fimul word ptr [rcx + 0x29c189cb]; ret; 
0x0000000000412822: test byte ptr [rdi], -0x6c; rol byte ptr [rbp + 0x748948d2], 0x24; or byte ptr [rdi], cl; sahf; ret 0xd008; 
0x00000000004039bb: test byte ptr [rdi], -0x7b; ret 0xfffd; 
0x0000000000403bae: test cl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov ebx, dword ptr [rax - 0x77000000]; ret 0xf631; 
0x000000000040e59f: test dword ptr [rax + rax - 0x7cb80000], esi; ret 0x4104; 
0x000000000040cf1f: test dword ptr [rbx + 0x48000002], ebp; add esp, 0x10; pop rbx; ret; 
0x0000000000411c6e: test dword ptr [rsi + 0x48000001], ecx; add esp, 0x10; pop rbx; ret; 
0x000000000040e98a: test dword ptr [rsi + 0x5bfffffe], edi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040636f: test dword ptr [rsi], edx; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4008; 
0x0000000000411a0d: test eax, eax; cmove rax, rdx; ret; 
0x000000000040100c: test eax, eax; je 0x1012; call rax; add rsp, 8; ret; 
0x0000000000412188: test eax, eax; jne 0x12164; xor eax, eax; pop rbx; ret; 
0x00000000004028f7: test eax, edx; jne 0x28d0; xor eax, esi; ret; 
0x00000000004026e9: test ecx, ecx; jne 0x26c8; xor eax, r11d; pop rbx; pop rbp; ret; 
0x00000000004027a9: test ecx, ecx; jne 0x2788; xor eax, r11d; pop rbx; pop rbp; ret; 
0x00000000004026e8: test ecx, r9d; jne 0x26c8; xor eax, r11d; pop rbx; pop rbp; ret; 
0x00000000004027a8: test ecx, r9d; jne 0x2788; xor eax, r11d; pop rbx; pop rbp; ret; 
0x00000000004119b3: test edi, edi; je 0x119c0; cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x119c8; ret; 
0x0000000000412971: test edi, edi; je 0x129b0; cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x12988; mov eax, dword ptr [rdi + 0x40]; ret; 
0x000000000041188d: test edx, edx; je 0x118a7; add rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004118cd: test edx, edx; je 0x118e7; add rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000412503: test edx, edx; je 0x1250c; cmp edx, -5; jne 0x12522; pop rbx; ret; 
0x0000000000412ff9: test edx, edx; js 0x13010; mov edx, edx; call 0x12da0; add rsp, 8; ret; 
0x000000000040d227: test edx, edx; sete al; ret; 
0x000000000040282c: test esi, ecx; jne 0x2808; add r10d, 1; sar rdi, 1; jne 0x27e9; ret; 
0x00000000004028ac: test esi, ecx; jne 0x2888; add r10d, 1; sar rdi, 1; jne 0x2869; ret; 
0x000000000040282b: test esi, r9d; jne 0x2808; add r10d, 1; sar rdi, 1; jne 0x27e9; ret; 
0x00000000004028ab: test esi, r9d; jne 0x2888; add r10d, 1; sar rdi, 1; jne 0x2869; ret; 
0x00000000004028f6: test r8d, edx; jne 0x28d0; xor eax, esi; ret; 
0x0000000000411a0c: test rax, rax; cmove rax, rdx; ret; 
0x000000000040100b: test rax, rax; je 0x1012; call rax; add rsp, 8; ret; 
0x00000000004119b2: test rdi, rdi; je 0x119c0; cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x119c8; ret; 
0x0000000000412970: test rdi, rdi; je 0x129b0; cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x12988; mov eax, dword ptr [rdi + 0x40]; ret; 
0x000000000040a44f: vpor ymm11, ymm15, ymmword ptr [rcx]; nop dword ptr [rax + rax]; mov eax, 0xfffffffe; ret; 
0x000000000040c6cc: vpslldq xmm2, xmm3, 0xff; inc dword ptr [rcx]; ret 0xf45; 
0x000000000040a6d4: xadd edx, edi; add al, 0x83; ret 0xeb05; 
0x00000000004063a8: xchg dword ptr [rax - 0x77000000], esp; ret 0x4890; 
0x000000000040ff5a: xchg dword ptr [rdi + rdx], ecx; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rdi + 0x1718], xmm0; ret; 
0x000000000041016e: xchg dword ptr [rdi + rdx], esi; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040b601: xchg dword ptr [rdx], edi; or dword ptr [rax], eax; add byte ptr [rcx], ch; ret; 
0x000000000040f31f: xchg ebp, eax; add cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000403c15: xchg ebp, eax; ret 0x63eb; 
0x0000000000406d27: xchg ebp, eax; ret 0x7c83; 
0x0000000000405981: xchg ebp, eax; ret 0x8348; 
0x000000000040342f: xchg ebp, eax; ret 0xca08; 
0x000000000040596e: xchg ebp, eax; ret 0xd201; 
0x0000000000405964: xchg ebp, eax; ror dword ptr [rax - 0x75], 0x76; adc byte ptr [rbp - 0x7b], al; fisttp dword ptr [rdi]; xchg ebp, eax; ret 0xd201; 
0x000000000040d0b3: xchg ebp, eax; ret; 
0x0000000000411931: xchg ebx, eax; mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; sub rax, rdx; ret; 
0x0000000000411029: xchg ebx, eax; sbb dword ptr [rax], eax; add byte ptr [rax - 2], bh; ret; 
0x00000000004065bc: xchg ecx, eax; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8548; 
0x0000000000403105: xchg esp, eax; ret 0x8341; 
0x0000000000412824: xchg esp, eax; rol byte ptr [rbp + 0x748948d2], 0x24; or byte ptr [rdi], cl; sahf; ret 0xd008; 
0x000000000041016f: xor al, 0x17; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000404c3a: xor al, 0x17; add byte ptr [rax], al; mov dword ptr [rdx], eax; xor ecx, ecx; mov eax, ecx; ret; 
0x000000000040f11e: xor al, 0x17; add byte ptr [rax], al; pop r14; pop r15; ret; 
0x000000000040ce6b: xor al, 0x3f; add byte ptr [rax], al; cmp ecx, 0x1f; jbe 0xce80; mov eax, edx; ret; 
0x000000000040d59b: xor al, 0x3f; add byte ptr [rax], al; cmp ecx, 0x1f; jbe 0xd5b0; mov eax, edx; ret; 
0x000000000040a87d: xor al, 0x3f; add byte ptr [rax], al; cmp edi, 0x1f; jbe 0xa890; ret; 
0x000000000041009b: xor al, 0x48; add dword ptr [rbx + 0x28], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040ce8b: xor bh, al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, edx; ret; 
0x000000000040bd1e: xor byte ptr [r9 - 0x7d], r9b; rol byte ptr [rcx], 0x83; ret 0x4101; 
0x0000000000410ec7: xor byte ptr [rax + 0x29], cl; ret; 
0x000000000040b4aa: xor byte ptr [rcx - 0x77], cl; ret; 
0x000000000040bd1f: xor byte ptr [rcx - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x4101; 
0x00000000004136d6: xor byte ptr [rcx], dh; imul al; ret 0xfed9; 
0x000000000040f11d: xor byte ptr [rdi + rdx], 0; add byte ptr [rcx + 0x5e], al; pop r15; ret; 
0x00000000004102ab: xor byte ptr [rdi], dl; add byte ptr [rax], al; mov dword ptr [rax + 0x1734], 0; ret; 
0x0000000000410169: xor byte ptr [rdi], dl; add byte ptr [rax], al; mov dword ptr [rdi + 0x1734], 0; ret; 
0x0000000000404baa: xor byte ptr [rdx], al; jne 0x4b90; xor edx, edx; mov qword ptr [rax + 0x38], rsi; mov eax, edx; ret; 
0x00000000004030a9: xor dword ptr [rdi + rdx], 0; add byte ptr [rbx - 0x3f7cdfaf], cl; sub al, cl; clc; add edi, dword ptr [rcx]; ret 0x820f; 
0x000000000040116c: xor eax, eax; add rsp, 0x18; ret; 
0x000000000041144e: xor eax, eax; mov dword ptr [rdi + 0x2c], esi; ret; 
0x000000000040a8e9: xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x000000000040e5b1: xor eax, eax; mov edi, 6; cmp r11, rdx; jne 0xe57b; ret; 
0x000000000040a8e3: xor eax, eax; mov qword ptr [rsi + 0x50], rax; xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x0000000000410164: xor eax, eax; mov word ptr [rdi + 0x1730], ax; mov dword ptr [rdi + 0x1734], 0; ret; 
0x00000000004120a9: xor eax, eax; pop rbp; pop r12; ret; 
0x000000000040a584: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004075f5: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000404951: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000408e39: xor eax, eax; pop rbx; ret; 
0x000000000040d225: xor eax, eax; test edx, edx; sete al; ret; 
0x00000000004119b0: xor eax, eax; test rdi, rdi; je 0x119c0; cmp dword ptr [rdi + 0x18], 0x1c4f; je 0x119c8; ret; 
0x000000000040a8e0: xor eax, eax; xor r8d, r8d; mov qword ptr [rsi + 0x50], rax; xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x00000000004025bb: xor eax, eax; ret; 
0x00000000004026ee: xor eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004025b0: xor eax, edi; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000004028f4: xor eax, edi; test r8d, edx; jne 0x28d0; xor eax, esi; ret; 
0x00000000004028fb: xor eax, esi; ret; 
0x00000000004026ed: xor eax, r11d; pop rbx; pop rbp; ret; 
0x0000000000411408: xor ebp, ebp; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000404c40: xor ecx, ecx; mov eax, ecx; ret; 
0x0000000000412578: xor edx, edx; div rbx; pop rbx; ret; 
0x000000000040484d: xor edx, edx; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000040d5c1: xor edx, edx; mov eax, edx; ret; 
0x000000000040ce86: xor edx, edx; mov qword ptr [rax + 0x30], rsi; mov dword ptr [rsi + 0x48], 0; mov eax, edx; ret; 
0x0000000000404bae: xor edx, edx; mov qword ptr [rax + 0x38], rsi; mov eax, edx; ret; 
0x000000000040cc50: xor edx, edx; mov qword ptr [rbx + 0x38], 0; pop rbx; mov eax, edx; ret; 
0x00000000004102a6: xor edx, edx; mov word ptr [rax + 0x1730], dx; mov dword ptr [rax + 0x1734], 0; ret; 
0x000000000040a8e2: xor r8d, r8d; mov qword ptr [rsi + 0x50], rax; xor eax, eax; mov dword ptr [rsi + 0x58], r8d; ret; 
0x00000000004025af: xor rax, rdi; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000410c6e: cdqe; mov rax, qword ptr [rdx + rax*8]; ret; 
0x00000000004030b5: clc; add edi, dword ptr [rcx]; ret 0x820f; 
0x00000000004025b1: clc; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000401463: clc; pop r15; ret; 
0x000000000041191b: clc; push qword ptr [rcx + riz - 0x7f]; jnp 0x1193a; sbb al, 0; add byte ptr [rax + rcx + 0x5b], dh; ret; 
0x000000000041197b: clc; push qword ptr [rcx + riz - 0x7f]; jnp 0x1199a; sbb al, 0; add byte ptr [rax + rcx + 0x5b], dh; ret; 
0x00000000004028f5: clc; test r8d, edx; jne 0x28d0; xor eax, esi; ret; 
0x0000000000410c6d: clc; cdqe; mov rax, qword ptr [rdx + rax*8]; ret; 
0x0000000000410e0c: clc; ret; 
0x000000000041254a: clc; sti; je 0x12558; xor eax, eax; pop rbx; ret; 
0x0000000000411a53: cld; jne 0x11a70; mov qword ptr [rbx + 0x78], 0; mov dword ptr [rbx + 0x74], 0; pop rbx; ret; 
0x000000000040a6d6: cli; add al, 0x83; ret 0xeb05; 
0x000000000040537f: cli; add dword ptr [rdi], ecx; sahf; ret 0xd009; 
0x00000000004019aa: cli; cmovs ebp, dword ptr [rcx]; ret 0x6948; 
0x0000000000412508: cli; sti; jne 0x12522; pop rbx; ret; 
0x000000000040646e: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8548; 
0x0000000000410c6f: cwde; mov rax, qword ptr [rdx + rax*8]; ret; 
0x00000000004011a1: hlt; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000404ecd: int1; add rdx, rcx; add rax, rdx; ret; 
0x0000000000401601: int1; inc dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000040141d: int1; inc dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000413081: iretd; call 0x11aa0; xor eax, eax; pop rbx; ret; 
0x0000000000412572: iretd; call 0x12330; xor edx, edx; div rbx; pop rbx; ret; 
0x0000000000413063: iretd; call 0x12da0; xor edx, edx; div rbx; pop rbx; ret; 
0x0000000000403baf: leave; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov ebx, dword ptr [rax - 0x77000000]; ret 0xf631; 
0x0000000000404eca: leave; add rcx, rsi; add rdx, rcx; add rax, rdx; ret; 
0x0000000000412312: leave; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004026ea: leave; jne 0x26c8; xor eax, r11d; pop rbx; pop rbp; ret; 
0x00000000004027aa: leave; jne 0x2788; xor eax, r11d; pop rbx; pop rbp; ret; 
0x0000000000404c41: leave; mov eax, ecx; ret; 
0x000000000041231f: nop; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040477f: nop; mov eax, 0xfffffffe; ret; 
0x000000000040cc5f: nop; mov edx, 0xfffffffe; pop rbx; mov eax, edx; ret; 
0x00000000004102aa: nop; xor byte ptr [rdi], dl; add byte ptr [rax], al; mov dword ptr [rax + 0x1734], 0; ret; 
0x000000000041257f: nop; xor eax, eax; ret; 
0x00000000004011df: nop; ret; 
0x0000000000401016: ret; 
0x000000000041282e: sahf; ret 0xd008; 
0x0000000000405382: sahf; ret 0xd009; 
0x000000000040e565: stc; add dword ptr [rcx], ebx; inc dword ptr [rcx + 0x83e7]; add byte ptr [rbx - 0x7cb7f839], al; ret 0x4904; 
0x0000000000404c0d: stc; jb 0x4c28; mov ecx, 0xfffffffe; mov eax, ecx; ret; 
0x0000000000406ced: std; pop rbx; pop rbp; mov eax, edx; ret; 
0x000000000041254b: sti; je 0x12558; xor eax, eax; pop rbx; ret; 
0x0000000000412509: sti; jne 0x12522; pop rbx; ret; 
0x000000000040d5bd: sti; mov dword ptr [rax + 0x10], edx; xor edx, edx; mov eax, edx; ret; 
0x00000000004138ae: xlatb; mov eax, 0xfffffffe; ret; 
