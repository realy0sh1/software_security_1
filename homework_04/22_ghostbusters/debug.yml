# This is a Docker Compose file specifically for debugging inside the container.
# You need to specify it with `--file` or `-f` for all Docker Compose operations
# (e.g., `docker compose -f debug.yml up`).
#
# It will
#  (a) install GDB and pwndbg in the container when it starts (this may take a while)
#  (b) allow debugging inside the container with CAP_SYS_PTRACE
#  (c) disable the ynetd timeout, so you can debug at your leisure
# This needs Docker Compose 2.30 or later (for post_start).
#
# This is _not_ identical to the remote setup - make sure your exploit works with the plain compose.yml

services:
  ghostbusters:
    extends:
      file: compose.yml
      service: ghostbusters
    environment:
      PWNDBG_NO_AUTOUPDATE: 1
      YNETD_TIMEOUT: -1
    cap_add:
      - SYS_PTRACE
    volumes:
      - ./vuln.c:/vuln.c:ro
      - ./.cache/apt-cache:/var/cache/apt:rw
      - ./.cache/apt-lib:/var/lib/apt:rw
      - ./.cache/glibc:/glibc:rw
      - ./.cache/local:/root/.local:rw
      - ./.cache/pwndbg:/pwndbg:rw
    configs:
      - source: setup_script
        target: /sbin/setup.sh
        uid: "0"
        gid: "0"
        mode: "0500"
    post_start:
      - command: /sbin/setup.sh
        environment:
          DEBIAN_FRONTEND: noninteractive
          PWNDBG_COMMIT: a2fa68f7edc8286d8e476046a4b68e7944d446b0 # HEAD at the time I'm building this
        user: root
configs:
  setup_script:
    content: |
      #!/bin/bash
      set -euo pipefail
      sed 's/^deb/deb-src/' /etc/apt/sources.list > /etc/apt/sources.list.d/deb-src.list
      apt-get update
      apt-get install --yes binutils dpkg-dev gdb git procps
      if [ ! -e /glibc/src ]; then
        cd /glibc
        apt-get source glibc
        mv glibc-*/ src
      fi
      if [ ! -e /root/.gdbinit ] || ! grep -q 'directory /glibc/src' /root/.gdbinit; then
        echo 'directory /glibc/src' >> /root/.gdbinit
      fi
      cd /pwndbg
      if [ ! -e ./setup.sh ]; then
        git init
        git remote add origin https://github.com/pwndbg/pwndbg
        git fetch --depth 1 origin "$${PWNDBG_COMMIT}"
        git checkout FETCH_HEAD
      fi
      ./setup.sh
      echo -e '\n\n\n\x1b[32mSetup done.\x1b[0m'
      echo -e '\x1b[2mCached data is in \x1b[1m.cache/\x1b[0m'
      echo -e 'Use \x1b[1mdocker ps\x1b[0m to find the name of the current container.'
      echo -e 'Use \x1b[1mdocker exec -ti \x1b[34mCONTAINER\x1b[0m\x1b[1m /bin/bash\x1b[0m to start a root shell.'
      echo -e 'Connect to ynetd, then use \x1b[1mgdb -p "$(pgrep -n vuln)"\x1b[0m to start GDB.'
